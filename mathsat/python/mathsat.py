# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mathsat', [dirname(__file__)])
        except ImportError:
            import _mathsat
            return _mathsat
        if fp is not None:
            try:
                _mod = imp.load_module('_mathsat', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mathsat = swig_import_helper()
    del swig_import_helper
else:
    import _mathsat
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class msat_config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, msat_config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, msat_config, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _mathsat.msat_config_repr_set
    __swig_getmethods__["repr"] = _mathsat.msat_config_repr_get
    if _newclass:
        repr = _swig_property(_mathsat.msat_config_repr_get, _mathsat.msat_config_repr_set)

    def __init__(self):
        this = _mathsat.new_msat_config()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _mathsat.delete_msat_config
    __del__ = lambda self: None
msat_config_swigregister = _mathsat.msat_config_swigregister
msat_config_swigregister(msat_config)

class msat_env(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, msat_env, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, msat_env, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _mathsat.msat_env_repr_set
    __swig_getmethods__["repr"] = _mathsat.msat_env_repr_get
    if _newclass:
        repr = _swig_property(_mathsat.msat_env_repr_get, _mathsat.msat_env_repr_set)

    def __init__(self):
        this = _mathsat.new_msat_env()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _mathsat.delete_msat_env
    __del__ = lambda self: None
msat_env_swigregister = _mathsat.msat_env_swigregister
msat_env_swigregister(msat_env)

class msat_term(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, msat_term, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, msat_term, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _mathsat.msat_term_repr_set
    __swig_getmethods__["repr"] = _mathsat.msat_term_repr_get
    if _newclass:
        repr = _swig_property(_mathsat.msat_term_repr_get, _mathsat.msat_term_repr_set)

    def __init__(self):
        this = _mathsat.new_msat_term()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _mathsat.delete_msat_term
    __del__ = lambda self: None
msat_term_swigregister = _mathsat.msat_term_swigregister
msat_term_swigregister(msat_term)

class msat_decl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, msat_decl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, msat_decl, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _mathsat.msat_decl_repr_set
    __swig_getmethods__["repr"] = _mathsat.msat_decl_repr_get
    if _newclass:
        repr = _swig_property(_mathsat.msat_decl_repr_get, _mathsat.msat_decl_repr_set)

    def __init__(self):
        this = _mathsat.new_msat_decl()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _mathsat.delete_msat_decl
    __del__ = lambda self: None
msat_decl_swigregister = _mathsat.msat_decl_swigregister
msat_decl_swigregister(msat_decl)

class msat_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, msat_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, msat_type, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _mathsat.msat_type_repr_set
    __swig_getmethods__["repr"] = _mathsat.msat_type_repr_get
    if _newclass:
        repr = _swig_property(_mathsat.msat_type_repr_get, _mathsat.msat_type_repr_set)

    def __init__(self):
        this = _mathsat.new_msat_type()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _mathsat.delete_msat_type
    __del__ = lambda self: None
msat_type_swigregister = _mathsat.msat_type_swigregister
msat_type_swigregister(msat_type)


_mathsat.MSAT_UNKNOWN_swigconstant(_mathsat)
MSAT_UNKNOWN = _mathsat.MSAT_UNKNOWN

_mathsat.MSAT_UNSAT_swigconstant(_mathsat)
MSAT_UNSAT = _mathsat.MSAT_UNSAT

_mathsat.MSAT_SAT_swigconstant(_mathsat)
MSAT_SAT = _mathsat.MSAT_SAT

_mathsat.MSAT_UNDEF_swigconstant(_mathsat)
MSAT_UNDEF = _mathsat.MSAT_UNDEF

_mathsat.MSAT_FALSE_swigconstant(_mathsat)
MSAT_FALSE = _mathsat.MSAT_FALSE

_mathsat.MSAT_TRUE_swigconstant(_mathsat)
MSAT_TRUE = _mathsat.MSAT_TRUE

_mathsat.MSAT_TAG_ERROR_swigconstant(_mathsat)
MSAT_TAG_ERROR = _mathsat.MSAT_TAG_ERROR

_mathsat.MSAT_TAG_UNKNOWN_swigconstant(_mathsat)
MSAT_TAG_UNKNOWN = _mathsat.MSAT_TAG_UNKNOWN

_mathsat.MSAT_TAG_TRUE_swigconstant(_mathsat)
MSAT_TAG_TRUE = _mathsat.MSAT_TAG_TRUE

_mathsat.MSAT_TAG_FALSE_swigconstant(_mathsat)
MSAT_TAG_FALSE = _mathsat.MSAT_TAG_FALSE

_mathsat.MSAT_TAG_AND_swigconstant(_mathsat)
MSAT_TAG_AND = _mathsat.MSAT_TAG_AND

_mathsat.MSAT_TAG_OR_swigconstant(_mathsat)
MSAT_TAG_OR = _mathsat.MSAT_TAG_OR

_mathsat.MSAT_TAG_NOT_swigconstant(_mathsat)
MSAT_TAG_NOT = _mathsat.MSAT_TAG_NOT

_mathsat.MSAT_TAG_IFF_swigconstant(_mathsat)
MSAT_TAG_IFF = _mathsat.MSAT_TAG_IFF

_mathsat.MSAT_TAG_PLUS_swigconstant(_mathsat)
MSAT_TAG_PLUS = _mathsat.MSAT_TAG_PLUS

_mathsat.MSAT_TAG_TIMES_swigconstant(_mathsat)
MSAT_TAG_TIMES = _mathsat.MSAT_TAG_TIMES

_mathsat.MSAT_TAG_DIVIDE_swigconstant(_mathsat)
MSAT_TAG_DIVIDE = _mathsat.MSAT_TAG_DIVIDE

_mathsat.MSAT_TAG_FLOOR_swigconstant(_mathsat)
MSAT_TAG_FLOOR = _mathsat.MSAT_TAG_FLOOR

_mathsat.MSAT_TAG_LEQ_swigconstant(_mathsat)
MSAT_TAG_LEQ = _mathsat.MSAT_TAG_LEQ

_mathsat.MSAT_TAG_EQ_swigconstant(_mathsat)
MSAT_TAG_EQ = _mathsat.MSAT_TAG_EQ

_mathsat.MSAT_TAG_ITE_swigconstant(_mathsat)
MSAT_TAG_ITE = _mathsat.MSAT_TAG_ITE

_mathsat.MSAT_TAG_INT_MOD_CONGR_swigconstant(_mathsat)
MSAT_TAG_INT_MOD_CONGR = _mathsat.MSAT_TAG_INT_MOD_CONGR

_mathsat.MSAT_TAG_BV_CONCAT_swigconstant(_mathsat)
MSAT_TAG_BV_CONCAT = _mathsat.MSAT_TAG_BV_CONCAT

_mathsat.MSAT_TAG_BV_EXTRACT_swigconstant(_mathsat)
MSAT_TAG_BV_EXTRACT = _mathsat.MSAT_TAG_BV_EXTRACT

_mathsat.MSAT_TAG_BV_NOT_swigconstant(_mathsat)
MSAT_TAG_BV_NOT = _mathsat.MSAT_TAG_BV_NOT

_mathsat.MSAT_TAG_BV_AND_swigconstant(_mathsat)
MSAT_TAG_BV_AND = _mathsat.MSAT_TAG_BV_AND

_mathsat.MSAT_TAG_BV_OR_swigconstant(_mathsat)
MSAT_TAG_BV_OR = _mathsat.MSAT_TAG_BV_OR

_mathsat.MSAT_TAG_BV_XOR_swigconstant(_mathsat)
MSAT_TAG_BV_XOR = _mathsat.MSAT_TAG_BV_XOR

_mathsat.MSAT_TAG_BV_ULT_swigconstant(_mathsat)
MSAT_TAG_BV_ULT = _mathsat.MSAT_TAG_BV_ULT

_mathsat.MSAT_TAG_BV_SLT_swigconstant(_mathsat)
MSAT_TAG_BV_SLT = _mathsat.MSAT_TAG_BV_SLT

_mathsat.MSAT_TAG_BV_ULE_swigconstant(_mathsat)
MSAT_TAG_BV_ULE = _mathsat.MSAT_TAG_BV_ULE

_mathsat.MSAT_TAG_BV_SLE_swigconstant(_mathsat)
MSAT_TAG_BV_SLE = _mathsat.MSAT_TAG_BV_SLE

_mathsat.MSAT_TAG_BV_COMP_swigconstant(_mathsat)
MSAT_TAG_BV_COMP = _mathsat.MSAT_TAG_BV_COMP

_mathsat.MSAT_TAG_BV_NEG_swigconstant(_mathsat)
MSAT_TAG_BV_NEG = _mathsat.MSAT_TAG_BV_NEG

_mathsat.MSAT_TAG_BV_ADD_swigconstant(_mathsat)
MSAT_TAG_BV_ADD = _mathsat.MSAT_TAG_BV_ADD

_mathsat.MSAT_TAG_BV_SUB_swigconstant(_mathsat)
MSAT_TAG_BV_SUB = _mathsat.MSAT_TAG_BV_SUB

_mathsat.MSAT_TAG_BV_MUL_swigconstant(_mathsat)
MSAT_TAG_BV_MUL = _mathsat.MSAT_TAG_BV_MUL

_mathsat.MSAT_TAG_BV_UDIV_swigconstant(_mathsat)
MSAT_TAG_BV_UDIV = _mathsat.MSAT_TAG_BV_UDIV

_mathsat.MSAT_TAG_BV_SDIV_swigconstant(_mathsat)
MSAT_TAG_BV_SDIV = _mathsat.MSAT_TAG_BV_SDIV

_mathsat.MSAT_TAG_BV_UREM_swigconstant(_mathsat)
MSAT_TAG_BV_UREM = _mathsat.MSAT_TAG_BV_UREM

_mathsat.MSAT_TAG_BV_SREM_swigconstant(_mathsat)
MSAT_TAG_BV_SREM = _mathsat.MSAT_TAG_BV_SREM

_mathsat.MSAT_TAG_BV_LSHL_swigconstant(_mathsat)
MSAT_TAG_BV_LSHL = _mathsat.MSAT_TAG_BV_LSHL

_mathsat.MSAT_TAG_BV_LSHR_swigconstant(_mathsat)
MSAT_TAG_BV_LSHR = _mathsat.MSAT_TAG_BV_LSHR

_mathsat.MSAT_TAG_BV_ASHR_swigconstant(_mathsat)
MSAT_TAG_BV_ASHR = _mathsat.MSAT_TAG_BV_ASHR

_mathsat.MSAT_TAG_BV_ROL_swigconstant(_mathsat)
MSAT_TAG_BV_ROL = _mathsat.MSAT_TAG_BV_ROL

_mathsat.MSAT_TAG_BV_ROR_swigconstant(_mathsat)
MSAT_TAG_BV_ROR = _mathsat.MSAT_TAG_BV_ROR

_mathsat.MSAT_TAG_BV_ZEXT_swigconstant(_mathsat)
MSAT_TAG_BV_ZEXT = _mathsat.MSAT_TAG_BV_ZEXT

_mathsat.MSAT_TAG_BV_SEXT_swigconstant(_mathsat)
MSAT_TAG_BV_SEXT = _mathsat.MSAT_TAG_BV_SEXT

_mathsat.MSAT_TAG_ARRAY_READ_swigconstant(_mathsat)
MSAT_TAG_ARRAY_READ = _mathsat.MSAT_TAG_ARRAY_READ

_mathsat.MSAT_TAG_ARRAY_WRITE_swigconstant(_mathsat)
MSAT_TAG_ARRAY_WRITE = _mathsat.MSAT_TAG_ARRAY_WRITE

_mathsat.MSAT_TAG_ARRAY_CONST_swigconstant(_mathsat)
MSAT_TAG_ARRAY_CONST = _mathsat.MSAT_TAG_ARRAY_CONST

_mathsat.MSAT_TAG_FP_EQ_swigconstant(_mathsat)
MSAT_TAG_FP_EQ = _mathsat.MSAT_TAG_FP_EQ

_mathsat.MSAT_TAG_FP_LT_swigconstant(_mathsat)
MSAT_TAG_FP_LT = _mathsat.MSAT_TAG_FP_LT

_mathsat.MSAT_TAG_FP_LE_swigconstant(_mathsat)
MSAT_TAG_FP_LE = _mathsat.MSAT_TAG_FP_LE

_mathsat.MSAT_TAG_FP_NEG_swigconstant(_mathsat)
MSAT_TAG_FP_NEG = _mathsat.MSAT_TAG_FP_NEG

_mathsat.MSAT_TAG_FP_ADD_swigconstant(_mathsat)
MSAT_TAG_FP_ADD = _mathsat.MSAT_TAG_FP_ADD

_mathsat.MSAT_TAG_FP_SUB_swigconstant(_mathsat)
MSAT_TAG_FP_SUB = _mathsat.MSAT_TAG_FP_SUB

_mathsat.MSAT_TAG_FP_MUL_swigconstant(_mathsat)
MSAT_TAG_FP_MUL = _mathsat.MSAT_TAG_FP_MUL

_mathsat.MSAT_TAG_FP_DIV_swigconstant(_mathsat)
MSAT_TAG_FP_DIV = _mathsat.MSAT_TAG_FP_DIV

_mathsat.MSAT_TAG_FP_SQRT_swigconstant(_mathsat)
MSAT_TAG_FP_SQRT = _mathsat.MSAT_TAG_FP_SQRT

_mathsat.MSAT_TAG_FP_ABS_swigconstant(_mathsat)
MSAT_TAG_FP_ABS = _mathsat.MSAT_TAG_FP_ABS

_mathsat.MSAT_TAG_FP_MIN_swigconstant(_mathsat)
MSAT_TAG_FP_MIN = _mathsat.MSAT_TAG_FP_MIN

_mathsat.MSAT_TAG_FP_MAX_swigconstant(_mathsat)
MSAT_TAG_FP_MAX = _mathsat.MSAT_TAG_FP_MAX

_mathsat.MSAT_TAG_FP_CAST_swigconstant(_mathsat)
MSAT_TAG_FP_CAST = _mathsat.MSAT_TAG_FP_CAST

_mathsat.MSAT_TAG_FP_ROUND_TO_INT_swigconstant(_mathsat)
MSAT_TAG_FP_ROUND_TO_INT = _mathsat.MSAT_TAG_FP_ROUND_TO_INT

_mathsat.MSAT_TAG_FP_FROM_SBV_swigconstant(_mathsat)
MSAT_TAG_FP_FROM_SBV = _mathsat.MSAT_TAG_FP_FROM_SBV

_mathsat.MSAT_TAG_FP_FROM_UBV_swigconstant(_mathsat)
MSAT_TAG_FP_FROM_UBV = _mathsat.MSAT_TAG_FP_FROM_UBV

_mathsat.MSAT_TAG_FP_TO_BV_swigconstant(_mathsat)
MSAT_TAG_FP_TO_BV = _mathsat.MSAT_TAG_FP_TO_BV

_mathsat.MSAT_TAG_FP_AS_IEEEBV_swigconstant(_mathsat)
MSAT_TAG_FP_AS_IEEEBV = _mathsat.MSAT_TAG_FP_AS_IEEEBV

_mathsat.MSAT_TAG_FP_ISNAN_swigconstant(_mathsat)
MSAT_TAG_FP_ISNAN = _mathsat.MSAT_TAG_FP_ISNAN

_mathsat.MSAT_TAG_FP_ISINF_swigconstant(_mathsat)
MSAT_TAG_FP_ISINF = _mathsat.MSAT_TAG_FP_ISINF

_mathsat.MSAT_TAG_FP_ISZERO_swigconstant(_mathsat)
MSAT_TAG_FP_ISZERO = _mathsat.MSAT_TAG_FP_ISZERO

_mathsat.MSAT_TAG_FP_ISSUBNORMAL_swigconstant(_mathsat)
MSAT_TAG_FP_ISSUBNORMAL = _mathsat.MSAT_TAG_FP_ISSUBNORMAL

_mathsat.MSAT_TAG_FP_ISNORMAL_swigconstant(_mathsat)
MSAT_TAG_FP_ISNORMAL = _mathsat.MSAT_TAG_FP_ISNORMAL

_mathsat.MSAT_TAG_FP_ISNEG_swigconstant(_mathsat)
MSAT_TAG_FP_ISNEG = _mathsat.MSAT_TAG_FP_ISNEG

_mathsat.MSAT_TAG_FP_ISPOS_swigconstant(_mathsat)
MSAT_TAG_FP_ISPOS = _mathsat.MSAT_TAG_FP_ISPOS

_mathsat.MSAT_TAG_FP_FROM_IEEEBV_swigconstant(_mathsat)
MSAT_TAG_FP_FROM_IEEEBV = _mathsat.MSAT_TAG_FP_FROM_IEEEBV

_mathsat.MSAT_TAG_INT_FROM_UBV_swigconstant(_mathsat)
MSAT_TAG_INT_FROM_UBV = _mathsat.MSAT_TAG_INT_FROM_UBV

_mathsat.MSAT_TAG_INT_FROM_SBV_swigconstant(_mathsat)
MSAT_TAG_INT_FROM_SBV = _mathsat.MSAT_TAG_INT_FROM_SBV

_mathsat.MSAT_TAG_INT_TO_BV_swigconstant(_mathsat)
MSAT_TAG_INT_TO_BV = _mathsat.MSAT_TAG_INT_TO_BV

_mathsat.MSAT_TAG_PI_swigconstant(_mathsat)
MSAT_TAG_PI = _mathsat.MSAT_TAG_PI

_mathsat.MSAT_TAG_EXP_swigconstant(_mathsat)
MSAT_TAG_EXP = _mathsat.MSAT_TAG_EXP

_mathsat.MSAT_TAG_SIN_swigconstant(_mathsat)
MSAT_TAG_SIN = _mathsat.MSAT_TAG_SIN

_mathsat.MSAT_TAG_LOG_swigconstant(_mathsat)
MSAT_TAG_LOG = _mathsat.MSAT_TAG_LOG

_mathsat.MSAT_TAG_POW_swigconstant(_mathsat)
MSAT_TAG_POW = _mathsat.MSAT_TAG_POW

_mathsat.MSAT_TAG_ASIN_swigconstant(_mathsat)
MSAT_TAG_ASIN = _mathsat.MSAT_TAG_ASIN

_mathsat.MSAT_TAG_FORALL_swigconstant(_mathsat)
MSAT_TAG_FORALL = _mathsat.MSAT_TAG_FORALL

_mathsat.MSAT_TAG_EXISTS_swigconstant(_mathsat)
MSAT_TAG_EXISTS = _mathsat.MSAT_TAG_EXISTS
class msat_model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, msat_model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, msat_model, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _mathsat.msat_model_repr_set
    __swig_getmethods__["repr"] = _mathsat.msat_model_repr_get
    if _newclass:
        repr = _swig_property(_mathsat.msat_model_repr_get, _mathsat.msat_model_repr_set)

    def __init__(self):
        this = _mathsat.new_msat_model()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _mathsat.delete_msat_model
    __del__ = lambda self: None
msat_model_swigregister = _mathsat.msat_model_swigregister
msat_model_swigregister(msat_model)

class msat_model_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, msat_model_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, msat_model_iterator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _mathsat.msat_model_iterator_repr_set
    __swig_getmethods__["repr"] = _mathsat.msat_model_iterator_repr_get
    if _newclass:
        repr = _swig_property(_mathsat.msat_model_iterator_repr_get, _mathsat.msat_model_iterator_repr_set)

    def __init__(self):
        this = _mathsat.new_msat_model_iterator()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _mathsat.delete_msat_model_iterator
    __del__ = lambda self: None
msat_model_iterator_swigregister = _mathsat.msat_model_iterator_swigregister
msat_model_iterator_swigregister(msat_model_iterator)


_mathsat.MSAT_VISIT_PROCESS_swigconstant(_mathsat)
MSAT_VISIT_PROCESS = _mathsat.MSAT_VISIT_PROCESS

_mathsat.MSAT_VISIT_SKIP_swigconstant(_mathsat)
MSAT_VISIT_SKIP = _mathsat.MSAT_VISIT_SKIP

_mathsat.MSAT_VISIT_ABORT_swigconstant(_mathsat)
MSAT_VISIT_ABORT = _mathsat.MSAT_VISIT_ABORT
class msat_proof_manager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, msat_proof_manager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, msat_proof_manager, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _mathsat.msat_proof_manager_repr_set
    __swig_getmethods__["repr"] = _mathsat.msat_proof_manager_repr_get
    if _newclass:
        repr = _swig_property(_mathsat.msat_proof_manager_repr_get, _mathsat.msat_proof_manager_repr_set)

    def __init__(self):
        this = _mathsat.new_msat_proof_manager()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _mathsat.delete_msat_proof_manager
    __del__ = lambda self: None
msat_proof_manager_swigregister = _mathsat.msat_proof_manager_swigregister
msat_proof_manager_swigregister(msat_proof_manager)

class msat_proof(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, msat_proof, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, msat_proof, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _mathsat.msat_proof_repr_set
    __swig_getmethods__["repr"] = _mathsat.msat_proof_repr_get
    if _newclass:
        repr = _swig_property(_mathsat.msat_proof_repr_get, _mathsat.msat_proof_repr_set)

    def __init__(self):
        this = _mathsat.new_msat_proof()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _mathsat.delete_msat_proof
    __del__ = lambda self: None
msat_proof_swigregister = _mathsat.msat_proof_swigregister
msat_proof_swigregister(msat_proof)


def msat_get_version():
    return _mathsat.msat_get_version()
msat_get_version = _mathsat.msat_get_version

def msat_last_error_message(env):
    return _mathsat.msat_last_error_message(env)
msat_last_error_message = _mathsat.msat_last_error_message

def msat_create_config():
    return _mathsat.msat_create_config()
msat_create_config = _mathsat.msat_create_config

def msat_create_default_config(logic):
    return _mathsat.msat_create_default_config(logic)
msat_create_default_config = _mathsat.msat_create_default_config

def _msat_parse_config(data):
    return _mathsat._msat_parse_config(data)
_msat_parse_config = _mathsat._msat_parse_config

def msat_destroy_config(cfg):
    return _mathsat.msat_destroy_config(cfg)
msat_destroy_config = _mathsat.msat_destroy_config

def _msat_create_env(cfg):
    return _mathsat._msat_create_env(cfg)
_msat_create_env = _mathsat._msat_create_env

def _msat_create_shared_env(cfg, sibling):
    return _mathsat._msat_create_shared_env(cfg, sibling)
_msat_create_shared_env = _mathsat._msat_create_shared_env

def msat_destroy_env(e):
    return _mathsat.msat_destroy_env(e)
msat_destroy_env = _mathsat.msat_destroy_env

def _msat_gc_env(env, tokeep, num_tokeep):
    return _mathsat._msat_gc_env(env, tokeep, num_tokeep)
_msat_gc_env = _mathsat._msat_gc_env

def msat_set_option(cfg, option, value):
    return _mathsat.msat_set_option(cfg, option, value)
msat_set_option = _mathsat.msat_set_option

def msat_set_termination_test(env, func):
    return _mathsat.msat_set_termination_test(env, func)
msat_set_termination_test = _mathsat.msat_set_termination_test

def msat_get_bool_type(env):
    return _mathsat.msat_get_bool_type(env)
msat_get_bool_type = _mathsat.msat_get_bool_type

def msat_get_rational_type(env):
    return _mathsat.msat_get_rational_type(env)
msat_get_rational_type = _mathsat.msat_get_rational_type

def msat_get_integer_type(env):
    return _mathsat.msat_get_integer_type(env)
msat_get_integer_type = _mathsat.msat_get_integer_type

def msat_get_bv_type(env, width):
    return _mathsat.msat_get_bv_type(env, width)
msat_get_bv_type = _mathsat.msat_get_bv_type

def msat_get_array_type(env, itp, etp):
    return _mathsat.msat_get_array_type(env, itp, etp)
msat_get_array_type = _mathsat.msat_get_array_type

def msat_get_fp_type(env, exp_width, mant_width):
    return _mathsat.msat_get_fp_type(env, exp_width, mant_width)
msat_get_fp_type = _mathsat.msat_get_fp_type

def msat_get_fp_roundingmode_type(env):
    return _mathsat.msat_get_fp_roundingmode_type(env)
msat_get_fp_roundingmode_type = _mathsat.msat_get_fp_roundingmode_type

def msat_get_simple_type(env, name):
    return _mathsat.msat_get_simple_type(env, name)
msat_get_simple_type = _mathsat.msat_get_simple_type

def _msat_get_function_type(env, param_types, num_params, return_type):
    return _mathsat._msat_get_function_type(env, param_types, num_params, return_type)
_msat_get_function_type = _mathsat._msat_get_function_type

def msat_is_bool_type(env, tp):
    return _mathsat.msat_is_bool_type(env, tp)
msat_is_bool_type = _mathsat.msat_is_bool_type

def msat_is_rational_type(env, tp):
    return _mathsat.msat_is_rational_type(env, tp)
msat_is_rational_type = _mathsat.msat_is_rational_type

def msat_is_integer_type(env, tp):
    return _mathsat.msat_is_integer_type(env, tp)
msat_is_integer_type = _mathsat.msat_is_integer_type

def _msat_is_bv_type(env, tp, out_width):
    return _mathsat._msat_is_bv_type(env, tp, out_width)
_msat_is_bv_type = _mathsat._msat_is_bv_type

def _msat_is_array_type(env, tp, out_itp, out_etp):
    return _mathsat._msat_is_array_type(env, tp, out_itp, out_etp)
_msat_is_array_type = _mathsat._msat_is_array_type

def _msat_is_fp_type(env, tp, out_exp_width, out_mant_width):
    return _mathsat._msat_is_fp_type(env, tp, out_exp_width, out_mant_width)
_msat_is_fp_type = _mathsat._msat_is_fp_type

def msat_is_fp_roundingmode_type(env, tp):
    return _mathsat.msat_is_fp_roundingmode_type(env, tp)
msat_is_fp_roundingmode_type = _mathsat.msat_is_fp_roundingmode_type

def msat_type_equals(t1, t2):
    return _mathsat.msat_type_equals(t1, t2)
msat_type_equals = _mathsat.msat_type_equals

def msat_type_repr(t):
    return _mathsat.msat_type_repr(t)
msat_type_repr = _mathsat.msat_type_repr

def msat_declare_function(e, name, type):
    return _mathsat.msat_declare_function(e, name, type)
msat_declare_function = _mathsat.msat_declare_function

def msat_make_true(e):
    return _mathsat.msat_make_true(e)
msat_make_true = _mathsat.msat_make_true

def msat_make_false(e):
    return _mathsat.msat_make_false(e)
msat_make_false = _mathsat.msat_make_false

def msat_make_iff(e, t1, t2):
    return _mathsat.msat_make_iff(e, t1, t2)
msat_make_iff = _mathsat.msat_make_iff

def msat_make_or(e, t1, t2):
    return _mathsat.msat_make_or(e, t1, t2)
msat_make_or = _mathsat.msat_make_or

def msat_make_and(e, t1, t2):
    return _mathsat.msat_make_and(e, t1, t2)
msat_make_and = _mathsat.msat_make_and

def msat_make_not(e, t1):
    return _mathsat.msat_make_not(e, t1)
msat_make_not = _mathsat.msat_make_not

def msat_make_equal(e, t1, t2):
    return _mathsat.msat_make_equal(e, t1, t2)
msat_make_equal = _mathsat.msat_make_equal

def msat_make_eq(e, t1, t2):
    return _mathsat.msat_make_eq(e, t1, t2)
msat_make_eq = _mathsat.msat_make_eq

def msat_make_leq(e, t1, t2):
    return _mathsat.msat_make_leq(e, t1, t2)
msat_make_leq = _mathsat.msat_make_leq

def msat_make_plus(e, t1, t2):
    return _mathsat.msat_make_plus(e, t1, t2)
msat_make_plus = _mathsat.msat_make_plus

def msat_make_times(e, t1, t2):
    return _mathsat.msat_make_times(e, t1, t2)
msat_make_times = _mathsat.msat_make_times

def msat_make_divide(e, t1, t2):
    return _mathsat.msat_make_divide(e, t1, t2)
msat_make_divide = _mathsat.msat_make_divide

def _msat_make_int_modular_congruence(e, modulus, t1, t2):
    return _mathsat._msat_make_int_modular_congruence(e, modulus, t1, t2)
_msat_make_int_modular_congruence = _mathsat._msat_make_int_modular_congruence

def msat_make_floor(e, t):
    return _mathsat.msat_make_floor(e, t)
msat_make_floor = _mathsat.msat_make_floor

def msat_make_pi(e):
    return _mathsat.msat_make_pi(e)
msat_make_pi = _mathsat.msat_make_pi

def msat_make_exp(e, t):
    return _mathsat.msat_make_exp(e, t)
msat_make_exp = _mathsat.msat_make_exp

def msat_make_sin(e, t):
    return _mathsat.msat_make_sin(e, t)
msat_make_sin = _mathsat.msat_make_sin

def msat_make_log(e, t):
    return _mathsat.msat_make_log(e, t)
msat_make_log = _mathsat.msat_make_log

def msat_make_pow(e, tb, te):
    return _mathsat.msat_make_pow(e, tb, te)
msat_make_pow = _mathsat.msat_make_pow

def msat_make_asin(e, t):
    return _mathsat.msat_make_asin(e, t)
msat_make_asin = _mathsat.msat_make_asin

def msat_make_number(e, num_rep):
    return _mathsat.msat_make_number(e, num_rep)
msat_make_number = _mathsat.msat_make_number

def msat_make_term_ite(e, c, tt, te):
    return _mathsat.msat_make_term_ite(e, c, tt, te)
msat_make_term_ite = _mathsat.msat_make_term_ite

def msat_make_constant(e, var):
    return _mathsat.msat_make_constant(e, var)
msat_make_constant = _mathsat.msat_make_constant

def msat_make_uf(e, func, args):
    return _mathsat.msat_make_uf(e, func, args)
msat_make_uf = _mathsat.msat_make_uf

def msat_make_array_read(e, arr, idx):
    return _mathsat.msat_make_array_read(e, arr, idx)
msat_make_array_read = _mathsat.msat_make_array_read

def msat_make_array_write(e, arr, idx, elem):
    return _mathsat.msat_make_array_write(e, arr, idx, elem)
msat_make_array_write = _mathsat.msat_make_array_write

def msat_make_array_const(e, arrtp, elem):
    return _mathsat.msat_make_array_const(e, arrtp, elem)
msat_make_array_const = _mathsat.msat_make_array_const

def msat_make_bv_number(e, num_rep, width, base):
    return _mathsat.msat_make_bv_number(e, num_rep, width, base)
msat_make_bv_number = _mathsat.msat_make_bv_number

def msat_make_bv_concat(e, t1, t2):
    return _mathsat.msat_make_bv_concat(e, t1, t2)
msat_make_bv_concat = _mathsat.msat_make_bv_concat

def msat_make_bv_extract(e, msb, lsb, t):
    return _mathsat.msat_make_bv_extract(e, msb, lsb, t)
msat_make_bv_extract = _mathsat.msat_make_bv_extract

def msat_make_bv_or(e, t1, t2):
    return _mathsat.msat_make_bv_or(e, t1, t2)
msat_make_bv_or = _mathsat.msat_make_bv_or

def msat_make_bv_xor(e, t1, t2):
    return _mathsat.msat_make_bv_xor(e, t1, t2)
msat_make_bv_xor = _mathsat.msat_make_bv_xor

def msat_make_bv_and(e, t1, t2):
    return _mathsat.msat_make_bv_and(e, t1, t2)
msat_make_bv_and = _mathsat.msat_make_bv_and

def msat_make_bv_not(e, t):
    return _mathsat.msat_make_bv_not(e, t)
msat_make_bv_not = _mathsat.msat_make_bv_not

def msat_make_bv_lshl(e, t1, t2):
    return _mathsat.msat_make_bv_lshl(e, t1, t2)
msat_make_bv_lshl = _mathsat.msat_make_bv_lshl

def msat_make_bv_lshr(e, t1, t2):
    return _mathsat.msat_make_bv_lshr(e, t1, t2)
msat_make_bv_lshr = _mathsat.msat_make_bv_lshr

def msat_make_bv_ashr(e, t1, t2):
    return _mathsat.msat_make_bv_ashr(e, t1, t2)
msat_make_bv_ashr = _mathsat.msat_make_bv_ashr

def msat_make_bv_zext(e, amount, t):
    return _mathsat.msat_make_bv_zext(e, amount, t)
msat_make_bv_zext = _mathsat.msat_make_bv_zext

def msat_make_bv_sext(e, amount, t):
    return _mathsat.msat_make_bv_sext(e, amount, t)
msat_make_bv_sext = _mathsat.msat_make_bv_sext

def msat_make_bv_plus(e, t1, t2):
    return _mathsat.msat_make_bv_plus(e, t1, t2)
msat_make_bv_plus = _mathsat.msat_make_bv_plus

def msat_make_bv_minus(e, t1, t2):
    return _mathsat.msat_make_bv_minus(e, t1, t2)
msat_make_bv_minus = _mathsat.msat_make_bv_minus

def msat_make_bv_neg(e, t):
    return _mathsat.msat_make_bv_neg(e, t)
msat_make_bv_neg = _mathsat.msat_make_bv_neg

def msat_make_bv_times(e, t1, t2):
    return _mathsat.msat_make_bv_times(e, t1, t2)
msat_make_bv_times = _mathsat.msat_make_bv_times

def msat_make_bv_udiv(e, t1, t2):
    return _mathsat.msat_make_bv_udiv(e, t1, t2)
msat_make_bv_udiv = _mathsat.msat_make_bv_udiv

def msat_make_bv_urem(e, t1, t2):
    return _mathsat.msat_make_bv_urem(e, t1, t2)
msat_make_bv_urem = _mathsat.msat_make_bv_urem

def msat_make_bv_sdiv(e, t1, t2):
    return _mathsat.msat_make_bv_sdiv(e, t1, t2)
msat_make_bv_sdiv = _mathsat.msat_make_bv_sdiv

def msat_make_bv_srem(e, t1, t2):
    return _mathsat.msat_make_bv_srem(e, t1, t2)
msat_make_bv_srem = _mathsat.msat_make_bv_srem

def msat_make_bv_ult(e, t1, t2):
    return _mathsat.msat_make_bv_ult(e, t1, t2)
msat_make_bv_ult = _mathsat.msat_make_bv_ult

def msat_make_bv_uleq(e, t1, t2):
    return _mathsat.msat_make_bv_uleq(e, t1, t2)
msat_make_bv_uleq = _mathsat.msat_make_bv_uleq

def msat_make_bv_slt(e, t1, t2):
    return _mathsat.msat_make_bv_slt(e, t1, t2)
msat_make_bv_slt = _mathsat.msat_make_bv_slt

def msat_make_bv_sleq(e, t1, t2):
    return _mathsat.msat_make_bv_sleq(e, t1, t2)
msat_make_bv_sleq = _mathsat.msat_make_bv_sleq

def msat_make_bv_rol(e, amount, t):
    return _mathsat.msat_make_bv_rol(e, amount, t)
msat_make_bv_rol = _mathsat.msat_make_bv_rol

def msat_make_bv_ror(e, amount, t):
    return _mathsat.msat_make_bv_ror(e, amount, t)
msat_make_bv_ror = _mathsat.msat_make_bv_ror

def msat_make_bv_comp(e, t1, t2):
    return _mathsat.msat_make_bv_comp(e, t1, t2)
msat_make_bv_comp = _mathsat.msat_make_bv_comp

def msat_make_fp_roundingmode_nearest_even(e):
    return _mathsat.msat_make_fp_roundingmode_nearest_even(e)
msat_make_fp_roundingmode_nearest_even = _mathsat.msat_make_fp_roundingmode_nearest_even

def msat_make_fp_roundingmode_zero(e):
    return _mathsat.msat_make_fp_roundingmode_zero(e)
msat_make_fp_roundingmode_zero = _mathsat.msat_make_fp_roundingmode_zero

def msat_make_fp_roundingmode_plus_inf(e):
    return _mathsat.msat_make_fp_roundingmode_plus_inf(e)
msat_make_fp_roundingmode_plus_inf = _mathsat.msat_make_fp_roundingmode_plus_inf

def msat_make_fp_roundingmode_minus_inf(e):
    return _mathsat.msat_make_fp_roundingmode_minus_inf(e)
msat_make_fp_roundingmode_minus_inf = _mathsat.msat_make_fp_roundingmode_minus_inf

def msat_make_fp_equal(e, t1, t2):
    return _mathsat.msat_make_fp_equal(e, t1, t2)
msat_make_fp_equal = _mathsat.msat_make_fp_equal

def msat_make_fp_lt(e, t1, t2):
    return _mathsat.msat_make_fp_lt(e, t1, t2)
msat_make_fp_lt = _mathsat.msat_make_fp_lt

def msat_make_fp_leq(e, t1, t2):
    return _mathsat.msat_make_fp_leq(e, t1, t2)
msat_make_fp_leq = _mathsat.msat_make_fp_leq

def msat_make_fp_neg(e, t):
    return _mathsat.msat_make_fp_neg(e, t)
msat_make_fp_neg = _mathsat.msat_make_fp_neg

def msat_make_fp_plus(e, rounding, t1, t2):
    return _mathsat.msat_make_fp_plus(e, rounding, t1, t2)
msat_make_fp_plus = _mathsat.msat_make_fp_plus

def msat_make_fp_minus(e, rounding, t1, t2):
    return _mathsat.msat_make_fp_minus(e, rounding, t1, t2)
msat_make_fp_minus = _mathsat.msat_make_fp_minus

def msat_make_fp_times(e, rounding, t1, t2):
    return _mathsat.msat_make_fp_times(e, rounding, t1, t2)
msat_make_fp_times = _mathsat.msat_make_fp_times

def msat_make_fp_div(e, rounding, t1, t2):
    return _mathsat.msat_make_fp_div(e, rounding, t1, t2)
msat_make_fp_div = _mathsat.msat_make_fp_div

def msat_make_fp_sqrt(e, rounding, t):
    return _mathsat.msat_make_fp_sqrt(e, rounding, t)
msat_make_fp_sqrt = _mathsat.msat_make_fp_sqrt

def msat_make_fp_abs(e, t):
    return _mathsat.msat_make_fp_abs(e, t)
msat_make_fp_abs = _mathsat.msat_make_fp_abs

def msat_make_fp_min(e, t1, t2):
    return _mathsat.msat_make_fp_min(e, t1, t2)
msat_make_fp_min = _mathsat.msat_make_fp_min

def msat_make_fp_max(e, t1, t2):
    return _mathsat.msat_make_fp_max(e, t1, t2)
msat_make_fp_max = _mathsat.msat_make_fp_max

def msat_make_fp_round_to_int(e, rounding, t):
    return _mathsat.msat_make_fp_round_to_int(e, rounding, t)
msat_make_fp_round_to_int = _mathsat.msat_make_fp_round_to_int

def msat_make_fp_cast(e, exp_w, mant_w, rounding, t):
    return _mathsat.msat_make_fp_cast(e, exp_w, mant_w, rounding, t)
msat_make_fp_cast = _mathsat.msat_make_fp_cast

def msat_make_fp_to_bv(e, width, rounding, t):
    return _mathsat.msat_make_fp_to_bv(e, width, rounding, t)
msat_make_fp_to_bv = _mathsat.msat_make_fp_to_bv

def msat_make_fp_from_sbv(e, exp_w, mant_w, rounding, t):
    return _mathsat.msat_make_fp_from_sbv(e, exp_w, mant_w, rounding, t)
msat_make_fp_from_sbv = _mathsat.msat_make_fp_from_sbv

def msat_make_fp_from_ubv(e, exp_w, mant_w, rounding, t):
    return _mathsat.msat_make_fp_from_ubv(e, exp_w, mant_w, rounding, t)
msat_make_fp_from_ubv = _mathsat.msat_make_fp_from_ubv

def msat_make_fp_as_ieeebv(e, t):
    return _mathsat.msat_make_fp_as_ieeebv(e, t)
msat_make_fp_as_ieeebv = _mathsat.msat_make_fp_as_ieeebv

def msat_make_fp_from_ieeebv(e, exp_w, mant_w, t):
    return _mathsat.msat_make_fp_from_ieeebv(e, exp_w, mant_w, t)
msat_make_fp_from_ieeebv = _mathsat.msat_make_fp_from_ieeebv

def msat_make_fp_isnan(e, t):
    return _mathsat.msat_make_fp_isnan(e, t)
msat_make_fp_isnan = _mathsat.msat_make_fp_isnan

def msat_make_fp_isinf(e, t):
    return _mathsat.msat_make_fp_isinf(e, t)
msat_make_fp_isinf = _mathsat.msat_make_fp_isinf

def msat_make_fp_iszero(e, t):
    return _mathsat.msat_make_fp_iszero(e, t)
msat_make_fp_iszero = _mathsat.msat_make_fp_iszero

def msat_make_fp_issubnormal(e, t):
    return _mathsat.msat_make_fp_issubnormal(e, t)
msat_make_fp_issubnormal = _mathsat.msat_make_fp_issubnormal

def msat_make_fp_isnormal(e, t):
    return _mathsat.msat_make_fp_isnormal(e, t)
msat_make_fp_isnormal = _mathsat.msat_make_fp_isnormal

def msat_make_fp_isneg(e, t):
    return _mathsat.msat_make_fp_isneg(e, t)
msat_make_fp_isneg = _mathsat.msat_make_fp_isneg

def msat_make_fp_ispos(e, t):
    return _mathsat.msat_make_fp_ispos(e, t)
msat_make_fp_ispos = _mathsat.msat_make_fp_ispos

def msat_make_fp_plus_inf(e, exp_w, mant_w):
    return _mathsat.msat_make_fp_plus_inf(e, exp_w, mant_w)
msat_make_fp_plus_inf = _mathsat.msat_make_fp_plus_inf

def msat_make_fp_minus_inf(e, exp_w, mant_w):
    return _mathsat.msat_make_fp_minus_inf(e, exp_w, mant_w)
msat_make_fp_minus_inf = _mathsat.msat_make_fp_minus_inf

def msat_make_fp_nan(e, exp_w, mant_w):
    return _mathsat.msat_make_fp_nan(e, exp_w, mant_w)
msat_make_fp_nan = _mathsat.msat_make_fp_nan

def msat_make_fp_rat_number(e, num_rep, exp_w, mant_w, rounding):
    return _mathsat.msat_make_fp_rat_number(e, num_rep, exp_w, mant_w, rounding)
msat_make_fp_rat_number = _mathsat.msat_make_fp_rat_number

def msat_make_fp_bits_number(e, bits, exp_w, mant_w):
    return _mathsat.msat_make_fp_bits_number(e, bits, exp_w, mant_w)
msat_make_fp_bits_number = _mathsat.msat_make_fp_bits_number

def msat_make_int_to_bv(e, width, t):
    return _mathsat.msat_make_int_to_bv(e, width, t)
msat_make_int_to_bv = _mathsat.msat_make_int_to_bv

def msat_make_int_from_ubv(e, t):
    return _mathsat.msat_make_int_from_ubv(e, t)
msat_make_int_from_ubv = _mathsat.msat_make_int_from_ubv

def msat_make_int_from_sbv(e, t):
    return _mathsat.msat_make_int_from_sbv(e, t)
msat_make_int_from_sbv = _mathsat.msat_make_int_from_sbv

def msat_make_forall(e, var, body):
    return _mathsat.msat_make_forall(e, var, body)
msat_make_forall = _mathsat.msat_make_forall

def msat_make_exists(e, var, body):
    return _mathsat.msat_make_exists(e, var, body)
msat_make_exists = _mathsat.msat_make_exists

def msat_make_variable(e, name, type):
    return _mathsat.msat_make_variable(e, name, type)
msat_make_variable = _mathsat.msat_make_variable

def msat_existentially_quantify(e, t, args, n):
    return _mathsat.msat_existentially_quantify(e, t, args, n)
msat_existentially_quantify = _mathsat.msat_existentially_quantify

def msat_make_term(e, d, args):
    return _mathsat.msat_make_term(e, d, args)
msat_make_term = _mathsat.msat_make_term

def msat_make_copy_from(e, t, src):
    return _mathsat.msat_make_copy_from(e, t, src)
msat_make_copy_from = _mathsat.msat_make_copy_from

def msat_term_id(t):
    return _mathsat.msat_term_id(t)
msat_term_id = _mathsat.msat_term_id

def msat_term_arity(t):
    return _mathsat.msat_term_arity(t)
msat_term_arity = _mathsat.msat_term_arity

def msat_term_get_arg(t, n):
    return _mathsat.msat_term_get_arg(t, n)
msat_term_get_arg = _mathsat.msat_term_get_arg

def msat_term_get_type(t):
    return _mathsat.msat_term_get_type(t)
msat_term_get_type = _mathsat.msat_term_get_type

def msat_term_is_true(e, t):
    return _mathsat.msat_term_is_true(e, t)
msat_term_is_true = _mathsat.msat_term_is_true

def msat_term_is_false(e, t):
    return _mathsat.msat_term_is_false(e, t)
msat_term_is_false = _mathsat.msat_term_is_false

def msat_term_is_boolean_constant(e, t):
    return _mathsat.msat_term_is_boolean_constant(e, t)
msat_term_is_boolean_constant = _mathsat.msat_term_is_boolean_constant

def msat_term_is_atom(e, t):
    return _mathsat.msat_term_is_atom(e, t)
msat_term_is_atom = _mathsat.msat_term_is_atom

def msat_term_is_number(e, t):
    return _mathsat.msat_term_is_number(e, t)
msat_term_is_number = _mathsat.msat_term_is_number

def _msat_term_to_number(e, t, out):
    return _mathsat._msat_term_to_number(e, t, out)
_msat_term_to_number = _mathsat._msat_term_to_number

def msat_term_is_and(e, t):
    return _mathsat.msat_term_is_and(e, t)
msat_term_is_and = _mathsat.msat_term_is_and

def msat_term_is_or(e, t):
    return _mathsat.msat_term_is_or(e, t)
msat_term_is_or = _mathsat.msat_term_is_or

def msat_term_is_not(e, t):
    return _mathsat.msat_term_is_not(e, t)
msat_term_is_not = _mathsat.msat_term_is_not

def msat_term_is_iff(e, t):
    return _mathsat.msat_term_is_iff(e, t)
msat_term_is_iff = _mathsat.msat_term_is_iff

def msat_term_is_term_ite(e, t):
    return _mathsat.msat_term_is_term_ite(e, t)
msat_term_is_term_ite = _mathsat.msat_term_is_term_ite

def msat_term_is_constant(e, t):
    return _mathsat.msat_term_is_constant(e, t)
msat_term_is_constant = _mathsat.msat_term_is_constant

def msat_term_is_uf(e, t):
    return _mathsat.msat_term_is_uf(e, t)
msat_term_is_uf = _mathsat.msat_term_is_uf

def msat_term_is_equal(e, t):
    return _mathsat.msat_term_is_equal(e, t)
msat_term_is_equal = _mathsat.msat_term_is_equal

def msat_term_is_leq(e, t):
    return _mathsat.msat_term_is_leq(e, t)
msat_term_is_leq = _mathsat.msat_term_is_leq

def msat_term_is_plus(e, t):
    return _mathsat.msat_term_is_plus(e, t)
msat_term_is_plus = _mathsat.msat_term_is_plus

def msat_term_is_times(e, t):
    return _mathsat.msat_term_is_times(e, t)
msat_term_is_times = _mathsat.msat_term_is_times

def msat_term_is_divide(e, t):
    return _mathsat.msat_term_is_divide(e, t)
msat_term_is_divide = _mathsat.msat_term_is_divide

def _msat_term_is_int_modular_congruence(e, t, out_mod):
    return _mathsat._msat_term_is_int_modular_congruence(e, t, out_mod)
_msat_term_is_int_modular_congruence = _mathsat._msat_term_is_int_modular_congruence

def msat_term_is_floor(e, t):
    return _mathsat.msat_term_is_floor(e, t)
msat_term_is_floor = _mathsat.msat_term_is_floor

def msat_term_is_pi(e, t):
    return _mathsat.msat_term_is_pi(e, t)
msat_term_is_pi = _mathsat.msat_term_is_pi

def msat_term_is_exp(e, t):
    return _mathsat.msat_term_is_exp(e, t)
msat_term_is_exp = _mathsat.msat_term_is_exp

def msat_term_is_sin(e, t):
    return _mathsat.msat_term_is_sin(e, t)
msat_term_is_sin = _mathsat.msat_term_is_sin

def msat_term_is_log(e, t):
    return _mathsat.msat_term_is_log(e, t)
msat_term_is_log = _mathsat.msat_term_is_log

def msat_term_is_pow(e, t):
    return _mathsat.msat_term_is_pow(e, t)
msat_term_is_pow = _mathsat.msat_term_is_pow

def msat_term_is_asin(e, t):
    return _mathsat.msat_term_is_asin(e, t)
msat_term_is_asin = _mathsat.msat_term_is_asin

def msat_term_is_array_read(e, t):
    return _mathsat.msat_term_is_array_read(e, t)
msat_term_is_array_read = _mathsat.msat_term_is_array_read

def msat_term_is_array_write(e, t):
    return _mathsat.msat_term_is_array_write(e, t)
msat_term_is_array_write = _mathsat.msat_term_is_array_write

def msat_term_is_array_const(e, t):
    return _mathsat.msat_term_is_array_const(e, t)
msat_term_is_array_const = _mathsat.msat_term_is_array_const

def msat_term_is_bv_concat(e, t):
    return _mathsat.msat_term_is_bv_concat(e, t)
msat_term_is_bv_concat = _mathsat.msat_term_is_bv_concat

def _msat_term_is_bv_extract(e, t, out_msb, out_lsb):
    return _mathsat._msat_term_is_bv_extract(e, t, out_msb, out_lsb)
_msat_term_is_bv_extract = _mathsat._msat_term_is_bv_extract

def msat_term_is_bv_or(e, t):
    return _mathsat.msat_term_is_bv_or(e, t)
msat_term_is_bv_or = _mathsat.msat_term_is_bv_or

def msat_term_is_bv_xor(e, t):
    return _mathsat.msat_term_is_bv_xor(e, t)
msat_term_is_bv_xor = _mathsat.msat_term_is_bv_xor

def msat_term_is_bv_and(e, t):
    return _mathsat.msat_term_is_bv_and(e, t)
msat_term_is_bv_and = _mathsat.msat_term_is_bv_and

def msat_term_is_bv_not(e, t):
    return _mathsat.msat_term_is_bv_not(e, t)
msat_term_is_bv_not = _mathsat.msat_term_is_bv_not

def msat_term_is_bv_plus(e, t):
    return _mathsat.msat_term_is_bv_plus(e, t)
msat_term_is_bv_plus = _mathsat.msat_term_is_bv_plus

def msat_term_is_bv_minus(e, t):
    return _mathsat.msat_term_is_bv_minus(e, t)
msat_term_is_bv_minus = _mathsat.msat_term_is_bv_minus

def msat_term_is_bv_times(e, t):
    return _mathsat.msat_term_is_bv_times(e, t)
msat_term_is_bv_times = _mathsat.msat_term_is_bv_times

def msat_term_is_bv_neg(e, t):
    return _mathsat.msat_term_is_bv_neg(e, t)
msat_term_is_bv_neg = _mathsat.msat_term_is_bv_neg

def msat_term_is_bv_udiv(e, t):
    return _mathsat.msat_term_is_bv_udiv(e, t)
msat_term_is_bv_udiv = _mathsat.msat_term_is_bv_udiv

def msat_term_is_bv_urem(e, t):
    return _mathsat.msat_term_is_bv_urem(e, t)
msat_term_is_bv_urem = _mathsat.msat_term_is_bv_urem

def msat_term_is_bv_sdiv(e, t):
    return _mathsat.msat_term_is_bv_sdiv(e, t)
msat_term_is_bv_sdiv = _mathsat.msat_term_is_bv_sdiv

def msat_term_is_bv_srem(e, t):
    return _mathsat.msat_term_is_bv_srem(e, t)
msat_term_is_bv_srem = _mathsat.msat_term_is_bv_srem

def msat_term_is_bv_ult(e, t):
    return _mathsat.msat_term_is_bv_ult(e, t)
msat_term_is_bv_ult = _mathsat.msat_term_is_bv_ult

def msat_term_is_bv_uleq(e, t):
    return _mathsat.msat_term_is_bv_uleq(e, t)
msat_term_is_bv_uleq = _mathsat.msat_term_is_bv_uleq

def msat_term_is_bv_slt(e, t):
    return _mathsat.msat_term_is_bv_slt(e, t)
msat_term_is_bv_slt = _mathsat.msat_term_is_bv_slt

def msat_term_is_bv_sleq(e, t):
    return _mathsat.msat_term_is_bv_sleq(e, t)
msat_term_is_bv_sleq = _mathsat.msat_term_is_bv_sleq

def msat_term_is_bv_lshl(e, t):
    return _mathsat.msat_term_is_bv_lshl(e, t)
msat_term_is_bv_lshl = _mathsat.msat_term_is_bv_lshl

def msat_term_is_bv_lshr(e, t):
    return _mathsat.msat_term_is_bv_lshr(e, t)
msat_term_is_bv_lshr = _mathsat.msat_term_is_bv_lshr

def msat_term_is_bv_ashr(e, t):
    return _mathsat.msat_term_is_bv_ashr(e, t)
msat_term_is_bv_ashr = _mathsat.msat_term_is_bv_ashr

def _msat_term_is_bv_zext(e, t, out_amount):
    return _mathsat._msat_term_is_bv_zext(e, t, out_amount)
_msat_term_is_bv_zext = _mathsat._msat_term_is_bv_zext

def _msat_term_is_bv_sext(e, t, out_amount):
    return _mathsat._msat_term_is_bv_sext(e, t, out_amount)
_msat_term_is_bv_sext = _mathsat._msat_term_is_bv_sext

def _msat_term_is_bv_rol(e, t, out_amount):
    return _mathsat._msat_term_is_bv_rol(e, t, out_amount)
_msat_term_is_bv_rol = _mathsat._msat_term_is_bv_rol

def _msat_term_is_bv_ror(e, t, out_amount):
    return _mathsat._msat_term_is_bv_ror(e, t, out_amount)
_msat_term_is_bv_ror = _mathsat._msat_term_is_bv_ror

def msat_term_is_bv_comp(e, t):
    return _mathsat.msat_term_is_bv_comp(e, t)
msat_term_is_bv_comp = _mathsat.msat_term_is_bv_comp

def msat_term_is_fp_roundingmode_nearest_even(e, t):
    return _mathsat.msat_term_is_fp_roundingmode_nearest_even(e, t)
msat_term_is_fp_roundingmode_nearest_even = _mathsat.msat_term_is_fp_roundingmode_nearest_even

def msat_term_is_fp_roundingmode_zero(e, t):
    return _mathsat.msat_term_is_fp_roundingmode_zero(e, t)
msat_term_is_fp_roundingmode_zero = _mathsat.msat_term_is_fp_roundingmode_zero

def msat_term_is_fp_roundingmode_plus_inf(e, t):
    return _mathsat.msat_term_is_fp_roundingmode_plus_inf(e, t)
msat_term_is_fp_roundingmode_plus_inf = _mathsat.msat_term_is_fp_roundingmode_plus_inf

def msat_term_is_fp_roundingmode_minus_inf(e, t):
    return _mathsat.msat_term_is_fp_roundingmode_minus_inf(e, t)
msat_term_is_fp_roundingmode_minus_inf = _mathsat.msat_term_is_fp_roundingmode_minus_inf

def msat_term_is_fp_equal(e, t):
    return _mathsat.msat_term_is_fp_equal(e, t)
msat_term_is_fp_equal = _mathsat.msat_term_is_fp_equal

def msat_term_is_fp_lt(e, t):
    return _mathsat.msat_term_is_fp_lt(e, t)
msat_term_is_fp_lt = _mathsat.msat_term_is_fp_lt

def msat_term_is_fp_leq(e, t):
    return _mathsat.msat_term_is_fp_leq(e, t)
msat_term_is_fp_leq = _mathsat.msat_term_is_fp_leq

def msat_term_is_fp_neg(e, t):
    return _mathsat.msat_term_is_fp_neg(e, t)
msat_term_is_fp_neg = _mathsat.msat_term_is_fp_neg

def msat_term_is_fp_plus(e, t):
    return _mathsat.msat_term_is_fp_plus(e, t)
msat_term_is_fp_plus = _mathsat.msat_term_is_fp_plus

def msat_term_is_fp_minus(e, t):
    return _mathsat.msat_term_is_fp_minus(e, t)
msat_term_is_fp_minus = _mathsat.msat_term_is_fp_minus

def msat_term_is_fp_times(e, t):
    return _mathsat.msat_term_is_fp_times(e, t)
msat_term_is_fp_times = _mathsat.msat_term_is_fp_times

def msat_term_is_fp_div(e, t):
    return _mathsat.msat_term_is_fp_div(e, t)
msat_term_is_fp_div = _mathsat.msat_term_is_fp_div

def msat_term_is_fp_sqrt(e, t):
    return _mathsat.msat_term_is_fp_sqrt(e, t)
msat_term_is_fp_sqrt = _mathsat.msat_term_is_fp_sqrt

def msat_term_is_fp_abs(e, t):
    return _mathsat.msat_term_is_fp_abs(e, t)
msat_term_is_fp_abs = _mathsat.msat_term_is_fp_abs

def msat_term_is_fp_min(e, t):
    return _mathsat.msat_term_is_fp_min(e, t)
msat_term_is_fp_min = _mathsat.msat_term_is_fp_min

def msat_term_is_fp_max(e, t):
    return _mathsat.msat_term_is_fp_max(e, t)
msat_term_is_fp_max = _mathsat.msat_term_is_fp_max

def msat_term_is_fp_round_to_int(e, t):
    return _mathsat.msat_term_is_fp_round_to_int(e, t)
msat_term_is_fp_round_to_int = _mathsat.msat_term_is_fp_round_to_int

def msat_term_is_fp_cast(e, t):
    return _mathsat.msat_term_is_fp_cast(e, t)
msat_term_is_fp_cast = _mathsat.msat_term_is_fp_cast

def msat_term_is_fp_to_bv(e, t):
    return _mathsat.msat_term_is_fp_to_bv(e, t)
msat_term_is_fp_to_bv = _mathsat.msat_term_is_fp_to_bv

def msat_term_is_fp_from_sbv(e, t):
    return _mathsat.msat_term_is_fp_from_sbv(e, t)
msat_term_is_fp_from_sbv = _mathsat.msat_term_is_fp_from_sbv

def msat_term_is_fp_from_ubv(e, t):
    return _mathsat.msat_term_is_fp_from_ubv(e, t)
msat_term_is_fp_from_ubv = _mathsat.msat_term_is_fp_from_ubv

def msat_term_is_fp_as_ieeebv(e, t):
    return _mathsat.msat_term_is_fp_as_ieeebv(e, t)
msat_term_is_fp_as_ieeebv = _mathsat.msat_term_is_fp_as_ieeebv

def msat_term_is_fp_from_ieeebv(e, t):
    return _mathsat.msat_term_is_fp_from_ieeebv(e, t)
msat_term_is_fp_from_ieeebv = _mathsat.msat_term_is_fp_from_ieeebv

def msat_term_is_fp_isnan(e, t):
    return _mathsat.msat_term_is_fp_isnan(e, t)
msat_term_is_fp_isnan = _mathsat.msat_term_is_fp_isnan

def msat_term_is_fp_isinf(e, t):
    return _mathsat.msat_term_is_fp_isinf(e, t)
msat_term_is_fp_isinf = _mathsat.msat_term_is_fp_isinf

def msat_term_is_fp_iszero(e, t):
    return _mathsat.msat_term_is_fp_iszero(e, t)
msat_term_is_fp_iszero = _mathsat.msat_term_is_fp_iszero

def msat_term_is_fp_issubnormal(e, t):
    return _mathsat.msat_term_is_fp_issubnormal(e, t)
msat_term_is_fp_issubnormal = _mathsat.msat_term_is_fp_issubnormal

def msat_term_is_fp_isnormal(e, t):
    return _mathsat.msat_term_is_fp_isnormal(e, t)
msat_term_is_fp_isnormal = _mathsat.msat_term_is_fp_isnormal

def msat_term_is_fp_isneg(e, t):
    return _mathsat.msat_term_is_fp_isneg(e, t)
msat_term_is_fp_isneg = _mathsat.msat_term_is_fp_isneg

def msat_term_is_fp_ispos(e, t):
    return _mathsat.msat_term_is_fp_ispos(e, t)
msat_term_is_fp_ispos = _mathsat.msat_term_is_fp_ispos

def msat_term_is_int_to_bv(e, t):
    return _mathsat.msat_term_is_int_to_bv(e, t)
msat_term_is_int_to_bv = _mathsat.msat_term_is_int_to_bv

def msat_term_is_int_from_ubv(e, t):
    return _mathsat.msat_term_is_int_from_ubv(e, t)
msat_term_is_int_from_ubv = _mathsat.msat_term_is_int_from_ubv

def msat_term_is_int_from_sbv(e, t):
    return _mathsat.msat_term_is_int_from_sbv(e, t)
msat_term_is_int_from_sbv = _mathsat.msat_term_is_int_from_sbv

def msat_term_is_quantifier(e, t):
    return _mathsat.msat_term_is_quantifier(e, t)
msat_term_is_quantifier = _mathsat.msat_term_is_quantifier

def msat_term_is_forall(e, t):
    return _mathsat.msat_term_is_forall(e, t)
msat_term_is_forall = _mathsat.msat_term_is_forall

def msat_term_is_exists(e, t):
    return _mathsat.msat_term_is_exists(e, t)
msat_term_is_exists = _mathsat.msat_term_is_exists

def msat_term_is_variable(e, t):
    return _mathsat.msat_term_is_variable(e, t)
msat_term_is_variable = _mathsat.msat_term_is_variable

def msat_visit_term(e, t, func):
    return _mathsat.msat_visit_term(e, t, func)
msat_visit_term = _mathsat.msat_visit_term

def _msat_apply_substitution(e, t, n, to_subst, values):
    return _mathsat._msat_apply_substitution(e, t, n, to_subst, values)
_msat_apply_substitution = _mathsat._msat_apply_substitution

def msat_find_decl(e, symbol):
    return _mathsat.msat_find_decl(e, symbol)
msat_find_decl = _mathsat.msat_find_decl

def msat_term_get_decl(t):
    return _mathsat.msat_term_get_decl(t)
msat_term_get_decl = _mathsat.msat_term_get_decl

def msat_decl_id(d):
    return _mathsat.msat_decl_id(d)
msat_decl_id = _mathsat.msat_decl_id

def msat_decl_get_tag(e, d):
    return _mathsat.msat_decl_get_tag(e, d)
msat_decl_get_tag = _mathsat.msat_decl_get_tag

def msat_decl_get_return_type(d):
    return _mathsat.msat_decl_get_return_type(d)
msat_decl_get_return_type = _mathsat.msat_decl_get_return_type

def msat_decl_get_arity(d):
    return _mathsat.msat_decl_get_arity(d)
msat_decl_get_arity = _mathsat.msat_decl_get_arity

def msat_decl_get_arg_type(d, n):
    return _mathsat.msat_decl_get_arg_type(d, n)
msat_decl_get_arg_type = _mathsat.msat_decl_get_arg_type

def msat_decl_get_name(d):
    return _mathsat.msat_decl_get_name(d)
msat_decl_get_name = _mathsat.msat_decl_get_name

def msat_decl_repr(d):
    return _mathsat.msat_decl_repr(d)
msat_decl_repr = _mathsat.msat_decl_repr

def msat_term_repr(t):
    return _mathsat.msat_term_repr(t)
msat_term_repr = _mathsat.msat_term_repr

def msat_from_string(e, data):
    return _mathsat.msat_from_string(e, data)
msat_from_string = _mathsat.msat_from_string

def msat_from_smtlib1(e, data):
    return _mathsat.msat_from_smtlib1(e, data)
msat_from_smtlib1 = _mathsat.msat_from_smtlib1

def msat_from_smtlib2(e, data):
    return _mathsat.msat_from_smtlib2(e, data)
msat_from_smtlib2 = _mathsat.msat_from_smtlib2

def msat_to_smtlib1(e, term):
    return _mathsat.msat_to_smtlib1(e, term)
msat_to_smtlib1 = _mathsat.msat_to_smtlib1

def msat_to_smtlib2(e, term):
    return _mathsat.msat_to_smtlib2(e, term)
msat_to_smtlib2 = _mathsat.msat_to_smtlib2

def msat_to_smtlib2_ext(e, term, logic_name, use_defines):
    return _mathsat.msat_to_smtlib2_ext(e, term, logic_name, use_defines)
msat_to_smtlib2_ext = _mathsat.msat_to_smtlib2_ext

def msat_to_smtlib2_term(e, term):
    return _mathsat.msat_to_smtlib2_term(e, term)
msat_to_smtlib2_term = _mathsat.msat_to_smtlib2_term

def _msat_named_list_from_smtlib2(e, data, out_n, out_names, out_terms):
    return _mathsat._msat_named_list_from_smtlib2(e, data, out_n, out_names, out_terms)
_msat_named_list_from_smtlib2 = _mathsat._msat_named_list_from_smtlib2

def _msat_named_list_to_smtlib2(e, n, names, terms):
    return _mathsat._msat_named_list_to_smtlib2(e, n, names, terms)
_msat_named_list_to_smtlib2 = _mathsat._msat_named_list_to_smtlib2

def _msat_annotated_list_from_smtlib2(e, data, out_n, out_terms, out_annots):
    return _mathsat._msat_annotated_list_from_smtlib2(e, data, out_n, out_terms, out_annots)
_msat_annotated_list_from_smtlib2 = _mathsat._msat_annotated_list_from_smtlib2

def _msat_annotated_list_to_smtlib2(e, n, terms, annots):
    return _mathsat._msat_annotated_list_to_smtlib2(e, n, terms, annots)
_msat_annotated_list_to_smtlib2 = _mathsat._msat_annotated_list_to_smtlib2

def msat_push_backtrack_point(e):
    return _mathsat.msat_push_backtrack_point(e)
msat_push_backtrack_point = _mathsat.msat_push_backtrack_point

def msat_pop_backtrack_point(e):
    return _mathsat.msat_pop_backtrack_point(e)
msat_pop_backtrack_point = _mathsat.msat_pop_backtrack_point

def msat_num_backtrack_points(e):
    return _mathsat.msat_num_backtrack_points(e)
msat_num_backtrack_points = _mathsat.msat_num_backtrack_points

def msat_reset_env(e):
    return _mathsat.msat_reset_env(e)
msat_reset_env = _mathsat.msat_reset_env

def msat_assert_formula(e, formula):
    return _mathsat.msat_assert_formula(e, formula)
msat_assert_formula = _mathsat.msat_assert_formula

def msat_add_preferred_for_branching(e, boolvar, phase):
    return _mathsat.msat_add_preferred_for_branching(e, boolvar, phase)
msat_add_preferred_for_branching = _mathsat.msat_add_preferred_for_branching

def msat_clear_preferred_for_branching(e):
    return _mathsat.msat_clear_preferred_for_branching(e)
msat_clear_preferred_for_branching = _mathsat.msat_clear_preferred_for_branching

def msat_solve(e):
    return _mathsat.msat_solve(e)
msat_solve = _mathsat.msat_solve

def _msat_solve_with_assumptions(e, assumptions, num_assumptions):
    return _mathsat._msat_solve_with_assumptions(e, assumptions, num_assumptions)
_msat_solve_with_assumptions = _mathsat._msat_solve_with_assumptions

def _msat_all_sat(e, important, num_important, func):
    return _mathsat._msat_all_sat(e, important, num_important, func)
_msat_all_sat = _mathsat._msat_all_sat

def _msat_solve_diversify(e, diversifiers, num_diversifiers, func):
    return _mathsat._msat_solve_diversify(e, diversifiers, num_diversifiers, func)
_msat_solve_diversify = _mathsat._msat_solve_diversify

def _msat_get_asserted_formulas(e, num_asserted):
    return _mathsat._msat_get_asserted_formulas(e, num_asserted)
_msat_get_asserted_formulas = _mathsat._msat_get_asserted_formulas

def _msat_get_theory_lemmas(e, num_tlemmas):
    return _mathsat._msat_get_theory_lemmas(e, num_tlemmas)
_msat_get_theory_lemmas = _mathsat._msat_get_theory_lemmas

def msat_get_search_stats(e):
    return _mathsat.msat_get_search_stats(e)
msat_get_search_stats = _mathsat.msat_get_search_stats

def _msat_simplify(e, formula, to_protect, num_to_protect):
    return _mathsat._msat_simplify(e, formula, to_protect, num_to_protect)
_msat_simplify = _mathsat._msat_simplify

def msat_create_itp_group(e):
    return _mathsat.msat_create_itp_group(e)
msat_create_itp_group = _mathsat.msat_create_itp_group

def msat_set_itp_group(e, group):
    return _mathsat.msat_set_itp_group(e, group)
msat_set_itp_group = _mathsat.msat_set_itp_group

def _msat_get_interpolant(e, groups_of_a, n):
    return _mathsat._msat_get_interpolant(e, groups_of_a, n)
_msat_get_interpolant = _mathsat._msat_get_interpolant

def msat_get_model_value(e, term):
    return _mathsat.msat_get_model_value(e, term)
msat_get_model_value = _mathsat.msat_get_model_value

def msat_create_model_iterator(e):
    return _mathsat.msat_create_model_iterator(e)
msat_create_model_iterator = _mathsat.msat_create_model_iterator

def msat_model_iterator_has_next(i):
    return _mathsat.msat_model_iterator_has_next(i)
msat_model_iterator_has_next = _mathsat.msat_model_iterator_has_next

def _msat_model_iterator_next(i, t, v):
    return _mathsat._msat_model_iterator_next(i, t, v)
_msat_model_iterator_next = _mathsat._msat_model_iterator_next

def msat_destroy_model_iterator(i):
    return _mathsat.msat_destroy_model_iterator(i)
msat_destroy_model_iterator = _mathsat.msat_destroy_model_iterator

def msat_get_model(e):
    return _mathsat.msat_get_model(e)
msat_get_model = _mathsat.msat_get_model

def msat_destroy_model(m):
    return _mathsat.msat_destroy_model(m)
msat_destroy_model = _mathsat.msat_destroy_model

def msat_model_eval(m, t):
    return _mathsat.msat_model_eval(m, t)
msat_model_eval = _mathsat.msat_model_eval

def msat_model_create_iterator(m):
    return _mathsat.msat_model_create_iterator(m)
msat_model_create_iterator = _mathsat.msat_model_create_iterator

def _msat_get_unsat_core(e, core_size):
    return _mathsat._msat_get_unsat_core(e, core_size)
_msat_get_unsat_core = _mathsat._msat_get_unsat_core

def msat_get_unsat_core_ext(e, core_size, extractor, user_data):
    return _mathsat.msat_get_unsat_core_ext(e, core_size, extractor, user_data)
msat_get_unsat_core_ext = _mathsat.msat_get_unsat_core_ext

def _msat_get_unsat_assumptions(e, assumps_size):
    return _mathsat._msat_get_unsat_assumptions(e, assumps_size)
_msat_get_unsat_assumptions = _mathsat._msat_get_unsat_assumptions

def msat_get_proof_manager(e):
    return _mathsat.msat_get_proof_manager(e)
msat_get_proof_manager = _mathsat.msat_get_proof_manager

def msat_destroy_proof_manager(m):
    return _mathsat.msat_destroy_proof_manager(m)
msat_destroy_proof_manager = _mathsat.msat_destroy_proof_manager

def msat_get_proof(m):
    return _mathsat.msat_get_proof(m)
msat_get_proof = _mathsat.msat_get_proof

def msat_proof_id(p):
    return _mathsat.msat_proof_id(p)
msat_proof_id = _mathsat.msat_proof_id

def msat_proof_is_term(p):
    return _mathsat.msat_proof_is_term(p)
msat_proof_is_term = _mathsat.msat_proof_is_term

def msat_proof_get_term(p):
    return _mathsat.msat_proof_get_term(p)
msat_proof_get_term = _mathsat.msat_proof_get_term

def msat_proof_get_name(p):
    return _mathsat.msat_proof_get_name(p)
msat_proof_get_name = _mathsat.msat_proof_get_name

def msat_proof_get_arity(p):
    return _mathsat.msat_proof_get_arity(p)
msat_proof_get_arity = _mathsat.msat_proof_get_arity

def msat_proof_get_child(p, i):
    return _mathsat.msat_proof_get_child(p, i)
msat_proof_get_child = _mathsat.msat_proof_get_child
class msat_dpll_callback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, msat_dpll_callback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, msat_dpll_callback, name)
    __repr__ = _swig_repr
    __swig_setmethods__["repr"] = _mathsat.msat_dpll_callback_repr_set
    __swig_getmethods__["repr"] = _mathsat.msat_dpll_callback_repr_get
    if _newclass:
        repr = _swig_property(_mathsat.msat_dpll_callback_repr_get, _mathsat.msat_dpll_callback_repr_set)

    def __init__(self):
        this = _mathsat.new_msat_dpll_callback()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _mathsat.delete_msat_dpll_callback
    __del__ = lambda self: None
msat_dpll_callback_swigregister = _mathsat.msat_dpll_callback_swigregister
msat_dpll_callback_swigregister(msat_dpll_callback)

class msat_ext_dpll_interface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, msat_ext_dpll_interface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, msat_ext_dpll_interface, name)
    __repr__ = _swig_repr
    __swig_setmethods__["new_var"] = _mathsat.msat_ext_dpll_interface_new_var_set
    __swig_getmethods__["new_var"] = _mathsat.msat_ext_dpll_interface_new_var_get
    if _newclass:
        new_var = _swig_property(_mathsat.msat_ext_dpll_interface_new_var_get, _mathsat.msat_ext_dpll_interface_new_var_set)
    __swig_setmethods__["set_decision_var"] = _mathsat.msat_ext_dpll_interface_set_decision_var_set
    __swig_getmethods__["set_decision_var"] = _mathsat.msat_ext_dpll_interface_set_decision_var_get
    if _newclass:
        set_decision_var = _swig_property(_mathsat.msat_ext_dpll_interface_set_decision_var_get, _mathsat.msat_ext_dpll_interface_set_decision_var_set)
    __swig_setmethods__["set_frozen"] = _mathsat.msat_ext_dpll_interface_set_frozen_set
    __swig_getmethods__["set_frozen"] = _mathsat.msat_ext_dpll_interface_set_frozen_get
    if _newclass:
        set_frozen = _swig_property(_mathsat.msat_ext_dpll_interface_set_frozen_get, _mathsat.msat_ext_dpll_interface_set_frozen_set)
    __swig_setmethods__["add_clause"] = _mathsat.msat_ext_dpll_interface_add_clause_set
    __swig_getmethods__["add_clause"] = _mathsat.msat_ext_dpll_interface_add_clause_get
    if _newclass:
        add_clause = _swig_property(_mathsat.msat_ext_dpll_interface_add_clause_get, _mathsat.msat_ext_dpll_interface_add_clause_set)
    __swig_setmethods__["solve"] = _mathsat.msat_ext_dpll_interface_solve_set
    __swig_getmethods__["solve"] = _mathsat.msat_ext_dpll_interface_solve_get
    if _newclass:
        solve = _swig_property(_mathsat.msat_ext_dpll_interface_solve_get, _mathsat.msat_ext_dpll_interface_solve_set)
    __swig_setmethods__["model_value"] = _mathsat.msat_ext_dpll_interface_model_value_set
    __swig_getmethods__["model_value"] = _mathsat.msat_ext_dpll_interface_model_value_get
    if _newclass:
        model_value = _swig_property(_mathsat.msat_ext_dpll_interface_model_value_get, _mathsat.msat_ext_dpll_interface_model_value_set)
    __swig_setmethods__["enqueue_assignment"] = _mathsat.msat_ext_dpll_interface_enqueue_assignment_set
    __swig_getmethods__["enqueue_assignment"] = _mathsat.msat_ext_dpll_interface_enqueue_assignment_get
    if _newclass:
        enqueue_assignment = _swig_property(_mathsat.msat_ext_dpll_interface_enqueue_assignment_get, _mathsat.msat_ext_dpll_interface_enqueue_assignment_set)
    __swig_setmethods__["remove_clauses_containing"] = _mathsat.msat_ext_dpll_interface_remove_clauses_containing_set
    __swig_getmethods__["remove_clauses_containing"] = _mathsat.msat_ext_dpll_interface_remove_clauses_containing_get
    if _newclass:
        remove_clauses_containing = _swig_property(_mathsat.msat_ext_dpll_interface_remove_clauses_containing_get, _mathsat.msat_ext_dpll_interface_remove_clauses_containing_set)
    __swig_setmethods__["reset"] = _mathsat.msat_ext_dpll_interface_reset_set
    __swig_getmethods__["reset"] = _mathsat.msat_ext_dpll_interface_reset_get
    if _newclass:
        reset = _swig_property(_mathsat.msat_ext_dpll_interface_reset_get, _mathsat.msat_ext_dpll_interface_reset_set)
    __swig_setmethods__["set_callback"] = _mathsat.msat_ext_dpll_interface_set_callback_set
    __swig_getmethods__["set_callback"] = _mathsat.msat_ext_dpll_interface_set_callback_get
    if _newclass:
        set_callback = _swig_property(_mathsat.msat_ext_dpll_interface_set_callback_get, _mathsat.msat_ext_dpll_interface_set_callback_set)

    def __init__(self):
        this = _mathsat.new_msat_ext_dpll_interface()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _mathsat.delete_msat_ext_dpll_interface
    __del__ = lambda self: None
msat_ext_dpll_interface_swigregister = _mathsat.msat_ext_dpll_interface_swigregister
msat_ext_dpll_interface_swigregister(msat_ext_dpll_interface)


def msat_set_external_dpll_engine(env, engine):
    return _mathsat.msat_set_external_dpll_engine(env, engine)
msat_set_external_dpll_engine = _mathsat.msat_set_external_dpll_engine

def msat_dpll_callback_no_conflict_after_bcp(cb, code, conflict):
    return _mathsat.msat_dpll_callback_no_conflict_after_bcp(cb, code, conflict)
msat_dpll_callback_no_conflict_after_bcp = _mathsat.msat_dpll_callback_no_conflict_after_bcp

def msat_dpll_callback_model_found(cb, code, conflict):
    return _mathsat.msat_dpll_callback_model_found(cb, code, conflict)
msat_dpll_callback_model_found = _mathsat.msat_dpll_callback_model_found

def msat_dpll_callback_notify_assignment(cb, lit):
    return _mathsat.msat_dpll_callback_notify_assignment(cb, lit)
msat_dpll_callback_notify_assignment = _mathsat.msat_dpll_callback_notify_assignment

def msat_dpll_callback_notify_new_level(cb):
    return _mathsat.msat_dpll_callback_notify_new_level(cb)
msat_dpll_callback_notify_new_level = _mathsat.msat_dpll_callback_notify_new_level

def msat_dpll_callback_notify_backtrack(cb, level):
    return _mathsat.msat_dpll_callback_notify_backtrack(cb, level)
msat_dpll_callback_notify_backtrack = _mathsat.msat_dpll_callback_notify_backtrack

def msat_dpll_callback_ask_theory_reason(cb, lit, reason):
    return _mathsat.msat_dpll_callback_ask_theory_reason(cb, lit, reason)
msat_dpll_callback_ask_theory_reason = _mathsat.msat_dpll_callback_ask_theory_reason

_mathsat.MSAT_EXIST_ELIM_ALLSMT_FM_swigconstant(_mathsat)
MSAT_EXIST_ELIM_ALLSMT_FM = _mathsat.MSAT_EXIST_ELIM_ALLSMT_FM

_mathsat.MSAT_EXIST_ELIM_VTS_swigconstant(_mathsat)
MSAT_EXIST_ELIM_VTS = _mathsat.MSAT_EXIST_ELIM_VTS
class msat_exist_elim_options(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, msat_exist_elim_options, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, msat_exist_elim_options, name)
    __repr__ = _swig_repr
    __swig_setmethods__["toplevel_propagation"] = _mathsat.msat_exist_elim_options_toplevel_propagation_set
    __swig_getmethods__["toplevel_propagation"] = _mathsat.msat_exist_elim_options_toplevel_propagation_get
    if _newclass:
        toplevel_propagation = _swig_property(_mathsat.msat_exist_elim_options_toplevel_propagation_get, _mathsat.msat_exist_elim_options_toplevel_propagation_set)
    __swig_setmethods__["boolean_simplifications"] = _mathsat.msat_exist_elim_options_boolean_simplifications_set
    __swig_getmethods__["boolean_simplifications"] = _mathsat.msat_exist_elim_options_boolean_simplifications_get
    if _newclass:
        boolean_simplifications = _swig_property(_mathsat.msat_exist_elim_options_boolean_simplifications_get, _mathsat.msat_exist_elim_options_boolean_simplifications_set)
    __swig_setmethods__["remove_redundant_constraints"] = _mathsat.msat_exist_elim_options_remove_redundant_constraints_set
    __swig_getmethods__["remove_redundant_constraints"] = _mathsat.msat_exist_elim_options_remove_redundant_constraints_get
    if _newclass:
        remove_redundant_constraints = _swig_property(_mathsat.msat_exist_elim_options_remove_redundant_constraints_get, _mathsat.msat_exist_elim_options_remove_redundant_constraints_set)

    def __init__(self):
        this = _mathsat.new_msat_exist_elim_options()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _mathsat.delete_msat_exist_elim_options
    __del__ = lambda self: None
msat_exist_elim_options_swigregister = _mathsat.msat_exist_elim_options_swigregister
msat_exist_elim_options_swigregister(msat_exist_elim_options)


def _msat_exist_elim(env, formula, vars_to_elim, num_vars_to_elim, algo, options):
    return _mathsat._msat_exist_elim(env, formula, vars_to_elim, num_vars_to_elim, algo, options)
_msat_exist_elim = _mathsat._msat_exist_elim

def _msat_exist_elim_model(env, formula, vars_to_elim, num_vars_to_elim, model_vars, model_values, model_size):
    return _mathsat._msat_exist_elim_model(env, formula, vars_to_elim, num_vars_to_elim, model_vars, model_values, model_size)
_msat_exist_elim_model = _mathsat._msat_exist_elim_model

def msat_aig_simplify(env, formula):
    return _mathsat.msat_aig_simplify(env, formula)
msat_aig_simplify = _mathsat.msat_aig_simplify

def msat_to_nnf(env, formula):
    return _mathsat.msat_to_nnf(env, formula)
msat_to_nnf = _mathsat.msat_to_nnf

def msat_lra_simplify(env, formula):
    return _mathsat.msat_lra_simplify(env, formula)
msat_lra_simplify = _mathsat.msat_lra_simplify

def MSAT_ERROR_CONFIG(c):
    return _mathsat.MSAT_ERROR_CONFIG(c)
MSAT_ERROR_CONFIG = _mathsat.MSAT_ERROR_CONFIG

def MSAT_ERROR_ENV(e):
    return _mathsat.MSAT_ERROR_ENV(e)
MSAT_ERROR_ENV = _mathsat.MSAT_ERROR_ENV

def MSAT_ERROR_TERM(t):
    return _mathsat.MSAT_ERROR_TERM(t)
MSAT_ERROR_TERM = _mathsat.MSAT_ERROR_TERM

def MSAT_ERROR_DECL(d):
    return _mathsat.MSAT_ERROR_DECL(d)
MSAT_ERROR_DECL = _mathsat.MSAT_ERROR_DECL

def MSAT_MAKE_ERROR_TERM():
    return _mathsat.MSAT_MAKE_ERROR_TERM()
MSAT_MAKE_ERROR_TERM = _mathsat.MSAT_MAKE_ERROR_TERM

def MSAT_ERROR_TYPE(t):
    return _mathsat.MSAT_ERROR_TYPE(t)
MSAT_ERROR_TYPE = _mathsat.MSAT_ERROR_TYPE

def MSAT_ERROR_MODEL_ITERATOR(i):
    return _mathsat.MSAT_ERROR_MODEL_ITERATOR(i)
MSAT_ERROR_MODEL_ITERATOR = _mathsat.MSAT_ERROR_MODEL_ITERATOR

def MSAT_ERROR_MODEL(m):
    return _mathsat.MSAT_ERROR_MODEL(m)
MSAT_ERROR_MODEL = _mathsat.MSAT_ERROR_MODEL

def MSAT_ERROR_PROOF_MANAGER(pm):
    return _mathsat.MSAT_ERROR_PROOF_MANAGER(pm)
MSAT_ERROR_PROOF_MANAGER = _mathsat.MSAT_ERROR_PROOF_MANAGER

def MSAT_ERROR_PROOF(p):
    return _mathsat.MSAT_ERROR_PROOF(p)
MSAT_ERROR_PROOF = _mathsat.MSAT_ERROR_PROOF


def msat_parse_config(data_or_file):
    if hasattr(data_or_file, 'read'):
        data_or_file = data_or_file.read()
    return _msat_parse_config(data_or_file)

def msat_parse_config_file(f):
    return _msat_parse_config(f.read())

def msat_create_env(conf=None, other=None):
    try:
        if conf is None:
            cfg = msat_create_config()
        elif hasattr(conf, 'items'):
            cfg = msat_create_config()
            for (k, v) in conf.items():
                msat_set_option(cfg, k, v)
        elif hasattr(conf, 'read'):
            cfg = _msat_parse_config(conf.read())
        else:
            try:
                cfg = conf + ""
            except:
                cfg = conf
            else:
                if '=' not in cfg:
                    cfg = msat_create_default_config(cfg)
                else:
                    cfg = msat_parse_config(cfg)
        if other is not None:
            return _msat_create_shared_env(cfg, other)
        else:
            return _msat_create_env(cfg)
    finally:
        if cfg is not conf:
            msat_destroy_config(cfg)

msat_create_shared_env = msat_create_env

def msat_get_function_type(env, param_types, return_type):
    return _msat_get_function_type(env, param_types, len(param_types), return_type)

def msat_model_iterator_next(i):
    "returns a tuple (term, value)"
    t = msat_term()
    v = msat_term()
    _msat_model_iterator_next(i, t, v)
    return (t, v)

def msat_all_sat(env, important, callback):
    return _msat_all_sat(env, important, len(important), callback)

def msat_solve_diversify(env, diversifiers, callback):
    return _msat_solve_diversify(env, diversifiers, len(diversifiers), callback)

def msat_get_asserted_formulas(env):
    return _msat_get_asserted_formulas(env, 0)

def msat_get_unsat_core(env):
    return _msat_get_unsat_core(env, 0)

def msat_get_theory_lemmas(env):
    return _msat_get_theory_lemmas(env, 0)

def msat_solve_with_assumptions(env, assumptions):
    return _msat_solve_with_assumptions(env, assumptions, len(assumptions))

def msat_get_unsat_assumptions(env):
    return _msat_get_unsat_assumptions(env, 0)

def msat_get_interpolant(env, groups_of_a):
    return _msat_get_interpolant(env, groups_of_a, len(groups_of_a))

def msat_from_smtlib1_file(env, fileobj):
    return _msat_from_smtlib1(env, fileobj.read())

def msat_from_smtlib2_file(env, fileobj):
    return _msat_from_smtlib2(env, fileobj.read())

def msat_term_to_number(env, term):
    return _msat_term_to_number(env, term, 0)

def msat_make_int_modular_congruence(env, modulus, t1, t2):
    return _msat_make_int_modular_congruence(env, str(modulus), t1, t2)

def msat_term_is_int_modular_congruence(env, term):
    "returns a tuple (res, number)"
    return _msat_term_is_int_modular_congruence(env, term, 0)


def msat_is_bv_type(env, tp):
    "returns a tuple (res, width)"
    return _msat_is_bv_type(env, tp, None)


def msat_is_array_type(env, tp):
    "returns a tuple (res, indextp, elemtp)"
    return _msat_is_array_type(env, tp, None, None)


def msat_is_fp_type(env, tp):
    "returns a tuple (res, exp_width, mant_width)"
    return _msat_is_fp_type(env, tp, None, None)


def msat_term_is_bv_extract(env, term):
    "returns a tuple (res, msb, lsb)"
    return _msat_term_is_bv_extract(env, term, None, None)


def msat_term_is_bv_zext(env, term):
    "returns a tuple (res, amount)"
    return _msat_term_is_bv_zext(env, term, None)


def msat_term_is_bv_sext(env, term):
    "returns a tuple (res, amount)"
    return _msat_term_is_bv_sext(env, term, None)


def msat_term_is_bv_rol(env, term):
    "returns a tuple (res, amount)"
    return _msat_term_is_bv_rol(env, term, None)


def msat_term_is_bv_ror(env, term):
    "returns a tuple (res, amount)"
    return _msat_term_is_bv_ror(env, term, None)


def msat_named_list_from_smtlib2(env, data):
    ret = _msat_named_list_from_smtlib2(env, data, 0, 0, 0)
    if ret is not None:
        ret = [p[0] for p in ret], [p[1] for p in ret]
    return ret

def msat_named_list_from_smtlib2_file(env, f):
    return msat_named_list_from_smtlib2(env, f.read())


def msat_named_list_to_smtlib2(env, names, terms):
    return _msat_named_list_to_smtlib2(env, len(names), names, terms)


def msat_named_list_to_smtlib2_file(env, names, terms, out):
    data = msat_named_list_to_smtlib2(env, names, terms)
    out.write(data)


def msat_annotated_list_from_smtlib2(env, data):
    return _msat_annotated_list_from_smtlib2(env, data, 0, 0, 0)


def msat_annotated_list_from_smtlib2_file(env, f):
    return msat_annotated_list_from_smtlib2(env, f.read())


def msat_annotated_list_to_smtlib2(env, terms, annots):
    return _msat_annotated_list_to_smtlib2(env, len(terms), terms, annots)


def msat_annotated_list_to_smtlib2_file(env, terms, annots, out):
    data = msat_annotated_list_to_smtlib2(env, terms, annots)
    out.write(data)


def msat_gc_env(env, tokeep):
    return _msat_gc_env(env, tokeep, len(tokeep))


# add suitable __eq__, __hash__ and __str__ methods to the msat classes

def _term_hash(self):
    return msat_term_id(self)
msat_term.__hash__ = _term_hash
del _term_hash

def _term_eq(self, other):
    return isinstance(other, msat_term) and msat_term_id(self) == msat_term_id(other)
msat_term.__eq__ = _term_eq
del _term_eq

def _term_str(self):
    if MSAT_ERROR_TERM(self): return "<ERROR>"
    return msat_term_repr(self)
msat_term.__str__ = _term_str
del _term_str

def _decl_hash(self):
    return msat_decl_id(self)
msat_decl.__hash__ = _decl_hash
del _decl_hash

def _decl_eq(self, other):
    return isinstance(other, msat_decl) and msat_decl_id(self) == msat_decl_id(other)
msat_decl.__eq__ = _decl_eq
del _decl_eq

def msat_exist_elim(env, formula, to_elim, algo,
                    toplevel_propagation=True,
                    boolean_simplifications=True,
                    remove_redundant_constraints=True):
    opts = msat_exist_elim_options()
    opts.toplevel_propagation = toplevel_propagation
    opts.boolean_simplifications = boolean_simplifications
    opts.remove_redundant_constraints = remove_redundant_constraints
    return _msat_exist_elim(env, formula, to_elim, len(to_elim), algo, opts)

def msat_exist_elim_model(env, formula, to_elim, model, model_values=None):
    if model_values is None:
        model_vars, model_values = [], []
        for (k, v) in getattr(model, 'iteritems', getattr(model, 'items'))():
            model_vars.append(k)
            model_values.append(v)
    else:
        model_vars = model
    return _msat_exist_elim_model(env, formula, to_elim, len(to_elim),
                                  model_vars, model_values, len(model_vars))

def msat_apply_substitution(env, term, to_subst, values=None):
    if values is None:
        m = to_subst
        to_subst = []
        values = []
        if hasattr(m, 'items'):
            for (k, v) in getattr(m, 'iteritems', m.items)():
                to_subst.append(k)
                values.append(v)
        else:
# assume m is a sequence of (k, v) pairs
            for (k, v) in m:
                to_subst.append(k)
                values.append(v)
    return _msat_apply_substitution(env, term, len(to_subst), to_subst, values)

def msat_simplify(env, formula, to_protect):
    return _msat_simplify(env, formula, to_protect, len(to_protect))

## EXTRA_PYTHON_CODE_TAG


# This file is compatible with both classic and new-style classes.


