(set-logic HORN)
(declare-fun state ((Array Int Int) Int Int Int Int Bool Int) Bool)
(assert (forall ((|a_1| (Array Int Int)) (|i_0| Int) (|m_0| Int) (|x_0| Int) (|N_1| Int) (|.loc.7| Bool) (|i1_0| Int) (|.loc.13| Bool) (|.y.11| Int) (|.y.10| Int) (|.y.9| Int) (|.y.8| (Array Int Int)) (|.y.12| Int) (|.xtv.1| Int)) (=> (and (and (= x_0 0) (and (= m_0 0) (= i_0 0))) (not .loc.7)) (state |a_1| |i_0| |m_0| |x_0| |N_1| |.loc.7| |i1_0|))))
(assert (forall ((|a_1| (Array Int Int)) (|i_0| Int) (|m_0| Int) (|x_0| Int) (|N_1| Int) (|.loc.7| Bool) (|i1_0| Int) (|.loc.13| Bool) (|.y.11| Int) (|.y.10| Int) (|.y.9| Int) (|.y.8| (Array Int Int)) (|.y.12| Int) (|.xtv.1| Int)) (=> (and (state |a_1| |i_0| |m_0| |x_0| |N_1| |.loc.7| |i1_0|) (let ((.def_31 (<= N_1 i_0))) (let ((.def_37 (select a_1 i_0))) (and (not .loc.7) (or (and (and (not (<= x_0 m_0)) (and (not (<= N_1 i1_0)) (and (not (<= i1_0 0)) .def_31))) .loc.13) (and (= (ite (<= x_0 .def_37) x_0 .def_37) .y.11) (and (= (ite (<= m_0 .def_37) .def_37 m_0) .y.10) (and (= (+ i_0 (* (- 1) .y.9)) (- 1)) (and (= a_1 .y.8) (and (= N_1 .y.12) (and (not .def_31) (not .loc.13)))))))))))) (state |.y.8| |.y.9| |.y.10| |.y.11| |.y.12| |.loc.13| |.xtv.1|))))
(assert (forall ((|a_1| (Array Int Int)) (|i_0| Int) (|m_0| Int) (|x_0| Int) (|N_1| Int) (|.loc.7| Bool) (|i1_0| Int) (|.loc.13| Bool) (|.y.11| Int) (|.y.10| Int) (|.y.9| Int) (|.y.8| (Array Int Int)) (|.y.12| Int) (|.xtv.1| Int)) (=> (state |a_1| |i_0| |m_0| |x_0| |N_1| |.loc.7| |i1_0|) (not .loc.7))))
(check-sat)
