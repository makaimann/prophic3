(set-logic HORN)
(declare-fun state ((Array Int Int) Int Int Int Int Bool Int) Bool)
(assert (forall ((|a_1| (Array Int Int)) (|i_0| Int) (|val1_0| Int) (|val2_0| Int) (|N_1| Int) (|.loc.7| Bool) (|i1_0| Int) (|.loc.13| Bool) (|.y.8| (Array Int Int)) (|.y.9| Int) (|.y.10| Int) (|.y.11| Int) (|.y.12| Int) (|.xtv.1| Int)) (=> (and (and (= val2_0 13) (and (= val1_0 7) (= i_0 0))) (not .loc.7)) (state |a_1| |i_0| |val1_0| |val2_0| |N_1| |.loc.7| |i1_0|))))
(assert (forall ((|a_1| (Array Int Int)) (|i_0| Int) (|val1_0| Int) (|val2_0| Int) (|N_1| Int) (|.loc.7| Bool) (|i1_0| Int) (|.loc.13| Bool) (|.y.8| (Array Int Int)) (|.y.9| Int) (|.y.10| Int) (|.y.11| Int) (|.y.12| Int) (|.xtv.1| Int)) (=> (and (state |a_1| |i_0| |val1_0| |val2_0| |N_1| |.loc.7| |i1_0|) (let ((.def_27 (select a_1 i1_0))) (let ((.def_35 (<= i_0 N_1))) (and (not .loc.7) (or (and (and (not (and (not (= val2_0 .def_27)) (not (= val1_0 .def_27)))) (and (<= i1_0 N_1) (and (not .def_35) (<= 0 i1_0)))) .loc.13) (and (= (ite (= i_0 val1_0) (store a_1 i_0 0) (ite (= i_0 val2_0) (store a_1 i_0 10) (store a_1 i_0 i_0))) .y.8) (and (= (+ i_0 (* (- 1) .y.9)) (- 1)) (and (= val1_0 .y.10) (and (= val2_0 .y.11) (and (= N_1 .y.12) (and .def_35 (not .loc.13)))))))))))) (state |.y.8| |.y.9| |.y.10| |.y.11| |.y.12| |.loc.13| |.xtv.1|))))
(assert (forall ((|a_1| (Array Int Int)) (|i_0| Int) (|val1_0| Int) (|val2_0| Int) (|N_1| Int) (|.loc.7| Bool) (|i1_0| Int) (|.loc.13| Bool) (|.y.8| (Array Int Int)) (|.y.9| Int) (|.y.10| Int) (|.y.11| Int) (|.y.12| Int) (|.xtv.1| Int)) (=> (state |a_1| |i_0| |val1_0| |val2_0| |N_1| |.loc.7| |i1_0|) (not .loc.7))))
(check-sat)
