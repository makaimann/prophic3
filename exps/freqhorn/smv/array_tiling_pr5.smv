-- generated by vmt2nuxmv.py on Mon Jan 11 18:04:42 2021
MODULE main
VAR
loc11 : boolean;
CC_1 : integer;
a_1 : array integer of integer;
i1_0 : integer;
i_1 : integer;
minval_1 : integer;
val1_1 : integer;
val2_1 : integer;
val3_1 : integer;
val4_1 : integer;
val5_1 : integer;

DEFINE
__expr1 := ! loc11;
__expr2 := val1_1 = 1;
__expr3 := CC_1 <= 0;
__expr4 := ! __expr3;
__expr5 := val2_1 = 3;
__expr6 := val3_1 = 7;
__expr7 := val4_1 = 5;
__expr8 := val5_1 = 2;
__expr9 := i_1 = 1;
__expr10 := __expr9 & __expr8;
__expr11 := __expr10 & __expr7;
__expr12 := __expr11 & __expr6;
__expr13 := __expr12 & __expr5;
__expr14 := __expr13 & __expr4;
__expr15 := __expr14 & __expr2;
__expr16 := __expr15 & __expr1;
__expr17 := ! next(loc11);
__expr18 := i_1 <= CC_1;
__expr19 := __expr18 & __expr17;
__expr20 := 5 * i_1;
__expr21 := __expr20 + -1;
__expr22 := __expr20 + -2;
__expr23 := __expr20 + -3;
__expr24 := __expr20 + -4;
__expr25 := __expr20 + -5;
__expr26 := WRITE(a_1, __expr25, 0);
__expr27 := WRITE(a_1, __expr25, val5_1);
__expr28 := minval_1 <= val5_1;
__expr29 := (case __expr28: __expr27; TRUE: __expr26; esac);
__expr30 := WRITE(__expr29, __expr24, 0);
__expr31 := WRITE(__expr29, __expr24, val4_1);
__expr32 := minval_1 <= val4_1;
__expr33 := (case __expr32: __expr31; TRUE: __expr30; esac);
__expr34 := WRITE(__expr33, __expr23, 0);
__expr35 := WRITE(__expr33, __expr23, val3_1);
__expr36 := minval_1 <= val3_1;
__expr37 := (case __expr36: __expr35; TRUE: __expr34; esac);
__expr38 := WRITE(__expr37, __expr22, 0);
__expr39 := WRITE(__expr37, __expr22, val2_1);
__expr40 := minval_1 <= val2_1;
__expr41 := (case __expr40: __expr39; TRUE: __expr38; esac);
__expr42 := WRITE(__expr41, __expr21, 0);
__expr43 := WRITE(__expr41, __expr21, val1_1);
__expr44 := minval_1 <= val1_1;
__expr45 := (case __expr44: __expr43; TRUE: __expr42; esac);
__expr46 := __expr45 = next(a_1);
__expr47 := __expr46 & __expr19;
__expr48 := -1 * next(i_1);
__expr49 := i_1 + __expr48;
__expr50 := __expr49 = -1;
__expr51 := __expr50 & __expr47;
__expr52 := CC_1 = next(CC_1);
__expr53 := __expr52 & __expr51;
__expr54 := val1_1 = next(val1_1);
__expr55 := __expr54 & __expr53;
__expr56 := val2_1 = next(val2_1);
__expr57 := __expr56 & __expr55;
__expr58 := val3_1 = next(val3_1);
__expr59 := __expr58 & __expr57;
__expr60 := val4_1 = next(val4_1);
__expr61 := __expr60 & __expr59;
__expr62 := val5_1 = next(val5_1);
__expr63 := __expr62 & __expr61;
__expr64 := minval_1 = next(minval_1);
__expr65 := __expr64 & __expr63;
__expr66 := READ(a_1, i1_0);
__expr67 := __expr66 = 0;
__expr68 := ! __expr67;
__expr69 := minval_1 <= __expr66;
__expr70 := ! __expr69;
__expr71 := 0 <= i1_0;
__expr72 := ! __expr18;
__expr73 := __expr72 & __expr71;
__expr74 := -1 * i1_0;
__expr75 := 5 * CC_1;
__expr76 := __expr75 + __expr74;
__expr77 := __expr76 <= 0;
__expr78 := ! __expr77;
__expr79 := __expr78 & __expr73;
__expr80 := __expr79 & __expr70;
__expr81 := __expr80 & __expr68;
__expr82 := __expr81 & next(loc11);
__expr83 := __expr82 | __expr65;
__expr84 := __expr1 & __expr83;

INIT __expr16;
TRANS __expr84;
INVARSPEC __expr1;
