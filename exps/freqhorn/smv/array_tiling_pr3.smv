-- generated by vmt2nuxmv.py on Mon Jan 11 18:04:42 2021
MODULE main
VAR
loc9 : boolean;
CC_1 : integer;
a_1 : array integer of integer;
i1_0 : integer;
i_1 : integer;
minval_1 : integer;
val1_1 : integer;
val2_1 : integer;
val3_1 : integer;

DEFINE
__expr1 := ! loc9;
__expr2 := val1_1 = 1;
__expr3 := CC_1 <= 0;
__expr4 := ! __expr3;
__expr5 := val2_1 = 3;
__expr6 := val3_1 = 7;
__expr7 := i_1 = 1;
__expr8 := __expr7 & __expr6;
__expr9 := __expr8 & __expr5;
__expr10 := __expr9 & __expr4;
__expr11 := __expr10 & __expr2;
__expr12 := __expr11 & __expr1;
__expr13 := ! next(loc9);
__expr14 := i_1 <= CC_1;
__expr15 := __expr14 & __expr13;
__expr16 := 3 * i_1;
__expr17 := __expr16 + -1;
__expr18 := __expr16 + -2;
__expr19 := __expr16 + -3;
__expr20 := WRITE(a_1, __expr19, 0);
__expr21 := WRITE(a_1, __expr19, val3_1);
__expr22 := minval_1 <= val3_1;
__expr23 := (case __expr22: __expr21; TRUE: __expr20; esac);
__expr24 := WRITE(__expr23, __expr18, 0);
__expr25 := WRITE(__expr23, __expr18, val2_1);
__expr26 := minval_1 <= val2_1;
__expr27 := (case __expr26: __expr25; TRUE: __expr24; esac);
__expr28 := WRITE(__expr27, __expr17, 0);
__expr29 := WRITE(__expr27, __expr17, val1_1);
__expr30 := minval_1 <= val1_1;
__expr31 := (case __expr30: __expr29; TRUE: __expr28; esac);
__expr32 := __expr31 = next(a_1);
__expr33 := __expr32 & __expr15;
__expr34 := -1 * next(i_1);
__expr35 := i_1 + __expr34;
__expr36 := __expr35 = -1;
__expr37 := __expr36 & __expr33;
__expr38 := CC_1 = next(CC_1);
__expr39 := __expr38 & __expr37;
__expr40 := val1_1 = next(val1_1);
__expr41 := __expr40 & __expr39;
__expr42 := val2_1 = next(val2_1);
__expr43 := __expr42 & __expr41;
__expr44 := val3_1 = next(val3_1);
__expr45 := __expr44 & __expr43;
__expr46 := minval_1 = next(minval_1);
__expr47 := __expr46 & __expr45;
__expr48 := READ(a_1, i1_0);
__expr49 := __expr48 = 0;
__expr50 := ! __expr49;
__expr51 := minval_1 <= __expr48;
__expr52 := ! __expr51;
__expr53 := 0 <= i1_0;
__expr54 := ! __expr14;
__expr55 := __expr54 & __expr53;
__expr56 := -1 * i1_0;
__expr57 := 3 * CC_1;
__expr58 := __expr57 + __expr56;
__expr59 := __expr58 <= 0;
__expr60 := ! __expr59;
__expr61 := __expr60 & __expr55;
__expr62 := __expr61 & __expr52;
__expr63 := __expr62 & __expr50;
__expr64 := __expr63 & next(loc9);
__expr65 := __expr64 | __expr47;
__expr66 := __expr1 & __expr65;

INIT __expr12;
TRANS __expr66;
INVARSPEC __expr1;
