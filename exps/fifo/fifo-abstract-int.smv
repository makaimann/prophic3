-- abstraction refinement loop run manually
-- status: got it to a point that seems sufficiently precise, but it just plugs away without converging

-- step 1: abstract
-- step 2: refinement 1
--         data value was not written correctly, add two-step axiom
-- step 3: refinement 2
--         doesn't maintain the value at index 0 between 1.2 and 1.3
--         rptr has value 0 at 1.2, add necessary axiom
-- step 4: refinement 3
--         loses the value at index 1 between State 1.2 and 1.3
--         but there are no other terms in that window with that value
--         i.e. there's no one-step or two-step axiom to be added
--         introduce a prophecy variable, because rptr is 1 in the last state

-- Note:
--      The property has a next in it, so need to look at the second to last step

MODULE main

IVAR
  data_in : integer;
  
  
VAR
  -- step 1: abstract
  -- fifo : array integer of integer;
  fifo : integer;
  wptr : integer;
  rptr : integer;
  en : boolean;
  cnt : integer;
  push : boolean;
  pop : boolean;
  packet : integer;

-- step 1: abstract
FUN
  read : integer * integer -> integer;

-- step 4: refinement 3
FROZENVAR
  rptr_2_0_proph : integer;

INIT cnt = 0

INIT wptr = 0

INIT rptr = 0

INIT !en

TRANS (!push & !en) -> !next(en)

TRANS en -> next(en)

INVAR !(push & pop)

TRANS (push & !en) -> next(cnt) = cnt + 1

TRANS (pop & cnt != 0) -> next(cnt) = cnt - 1
TRANS (pop & cnt = 0) -> next(cnt) = cnt

TRANS (!(push & !en) & !(pop)) -> next(cnt) = cnt

TRANS !en & next(en) -> next(packet) = data_in

TRANS en -> next(packet) = packet

TRANS push -> next(wptr) = wptr + 1

TRANS !push -> next(wptr) = wptr

TRANS pop -> next(rptr) = rptr + 1

TRANS !pop -> next(rptr) = rptr

-- step 1: abstract
-- TRANS push -> next(fifo) = WRITE(fifo, wptr, data_in)

-- step 2: refinement 1
TRANS push -> read(next(fifo), wptr) = data_in

-- step 3: refinement 2
TRANS rptr != wptr -> read(next(fifo), rptr) = read(fifo, rptr)

TRANS !push -> next(fifo) = fifo

INVAR wptr = rptr -> !pop

INVAR (wptr - rptr >= 8) -> !push

-- step 1: abstract
-- INVARSPEC (en & cnt = 1 & next(cnt) = 0) -> packet = READ(fifo, rptr)

-- step 4: refinement 3
-- INVARSPEC (en & cnt = 1 & next(cnt) = 0) -> packet = read(fifo, rptr)

-- transitions at rptr_2_0_proph
TRANS rptr_2_0_proph = wptr -> (push -> read(next(fifo), rptr_2_0_proph) = data_in)
TRANS rptr_2_0_proph != wptr -> (push -> read(next(fifo), rptr_2_0_proph) = read(fifo, rptr_2_0_proph))

-- new property
INVARSPEC rptr_2_0_proph = rptr -> ((en & cnt = 1 & next(cnt) = 0) -> packet = read(fifo, rptr))
