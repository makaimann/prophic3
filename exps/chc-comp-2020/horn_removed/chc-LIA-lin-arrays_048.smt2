; hcai-bench/./svcomp/O0/veris.c_sendmail__tTflag_arr_one_loop_true-unreach-call_true-termination_000.smt2
(set-logic HORN)

(declare-fun |main@_bb3| ( Int Int Int Int (Array Int Int) ) Bool)
(declare-fun |main@entry| ( Int ) Bool)
(declare-fun |main@verifier.error.split| ( ) Bool)
(declare-fun |main@_bb| ( Int Int Int (Array Int Int) ) Bool)

(assert
  (forall ( (A Int) ) 
    (=>
      (and
        true
      )
      (main@entry A)
    )
  )
)
(assert
  (forall ( (A (Array Int Int)) (B (Array Int Int)) (C Bool) (D Bool) (E Int) (F Int) (G Int) (H Int) (I (Array Int Int)) ) 
    (=>
      (and
        (main@entry F)
        (and (or (not D) (not C) (= E 0))
     (or (not D) (not C) (= H E))
     (or (not D) (not C) (= B A))
     (or (not D) (not C) (= I B))
     (or (not C) (and D C))
     (= C true)
     (not (<= G 0)))
      )
      (main@_bb F G H I)
    )
  )
)
(assert
  (forall ( (A Bool) (B Bool) (C Int) (D (Array Int Int)) (E Int) (F Int) (G Int) (H (Array Int Int)) (I Int) (J (Array Int Int)) (K Bool) (L Bool) (M Int) (N Int) (O Int) (P Int) (Q (Array Int Int)) ) 
    (=>
      (and
        (main@_bb N O G D)
        (let ((a!1 (= B (and (not (<= 10 G)) (>= G 0)))))
  (and (or (not L) (<= O 0) (not (<= E 0)))
       (or (not L) B (not A))
       (or (not L) (not K) (= M I))
       (or (not L) (not K) (= P M))
       (or (not L) (not K) (= J H))
       (or (not L) (not K) (= Q J))
       (or (not K) (and L K))
       (or (not L) (= C N))
       (or (not L) (= E (+ O G)))
       (or (not L) (= I (+ 1 G)))
       (or (not L) (= H (store D E F)))
       (or (not L) (not (<= O 0)))
       (or (not L) (and L A))
       (= K true)
       a!1))
      )
      (main@_bb N O P Q)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Bool) (D Bool) (E (Array Int Int)) (F Int) (G Int) (H Int) (I Int) (J Int) (K Bool) (L Bool) (M Int) (N Int) (O Int) (P Int) (Q Int) (R (Array Int Int)) ) 
    (=>
      (and
        (main@_bb A N B E)
        (let ((a!1 (= D (and (not (<= 10 B)) (>= B 0)))))
  (and (or (not L) (<= N 0) (not (<= F 0)))
       (or (not L) (<= N 0) (not (<= G 0)))
       (or (not L) (not K) (= I H))
       (or (not L) (not K) (= M 0))
       (or (not L) (not K) (= J 0))
       (or (not L) (not K) (= O I))
       (or (not L) (not K) (= P J))
       (or (not L) (not K) (= Q M))
       (or (not L) (not C) (not D))
       (or (not K) (and L K))
       (or (not L) (= F (+ 10 N)))
       (or (not L) (= G N))
       (or (not L) (= H (select R G)))
       (or (not L) (= R (store E F 0)))
       (or (not L) (not (<= N 0)))
       (or (not L) (and L C))
       (= K true)
       a!1))
      )
      (main@_bb3 N O P Q R)
    )
  )
)
(assert
  (forall ( (A Int) (B Bool) (C Bool) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Bool) (Q Bool) (R Int) (S Int) (T Int) (U Int) (V Int) (W (Array Int Int)) ) 
    (=>
      (and
        (main@_bb3 S D F I W)
        (let ((a!1 (= C (and (not (<= 10 A)) (>= A 0)))))
  (and (= A (+ (- 48) D))
       (or (not Q) (<= S 0) (not (<= J 0)))
       (or (not Q) C (not B))
       (or (not Q) (not P) (= N K))
       (or (not Q) (not P) (= R M))
       (or (not Q) (not P) (= O L))
       (or (not Q) (not P) (= T N))
       (or (not Q) (not P) (= U O))
       (or (not Q) (not P) (= V R))
       (or (not P) (and Q P))
       (or (not Q) (= E D))
       (or (not Q) (= H (+ (- 48) E)))
       (or (not Q) (= J (+ S M)))
       (or (not Q) (= G (* 10 F)))
       (or (not Q) (= K (select W J)))
       (or (not Q) (= L (+ G H)))
       (or (not Q) (= M (+ 1 I)))
       (or (not Q) (not (<= S 0)))
       (or (not Q) (and Q B))
       (= P true)
       a!1))
      )
      (main@_bb3 S T U V W)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D (Array Int Int)) (E Int) (F Int) (G Bool) (H Bool) (I Bool) (J Bool) (K Bool) (L Bool) (M Bool) (N Bool) (O Bool) (P Bool) ) 
    (=>
      (and
        (main@_bb3 A E B C D)
        (let ((a!1 (= H (and (not (<= 10 F)) (>= F 0)))))
  (and (= F (+ (- 48) E))
       (or (not J) (not H) (not G))
       (or (not M) (and K M))
       (or (not M) L)
       (or (not M) (not L))
       (or (not N) (and N M))
       (or (not O) (and O N))
       (or (not P) (and P O))
       (or (not J) (and J G))
       (or (not J) (not I))
       (or (not K) (and K J))
       (= P true)
       a!1))
      )
      main@verifier.error.split
    )
  )
)
(assert
  (forall ( (CHC_COMP_UNUSED Bool) ) 
    (=>
      (and
        main@verifier.error.split
        true
      )
      false
    )
  )
)

(check-sat)
(exit)
