; quic3/./data/standard_partition_original_true-unreach-call_ground_000.smt2
(set-logic HORN)

(declare-fun |main@verifier.error.split| ( ) Bool)
(declare-fun |main@bb52.i| ( (Array Int Int) Int Int Int ) Bool)
(declare-fun |main@bb18.i| ( Int (Array Int Int) (Array Int Int) Int Int Int Int Int Int ) Bool)
(declare-fun |main@entry| ( Int Int ) Bool)

(assert
  (forall ( (A Int) (B Int) ) 
    (=>
      (and
        true
      )
      (main@entry A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Bool) (E Int) (F Int) (G Int) (H (Array Int Int)) (I (Array Int Int)) (J (Array Int Int)) (K (Array Int Int)) (L Int) (M Int) (N Bool) (O Bool) (P Int) (Q Int) (R (Array Int Int)) (S (Array Int Int)) (T Int) (U Int) (V Int) (W Int) (X Int) (Y Int) ) 
    (=>
      (and
        (main@entry X B)
        (and (= A B)
     (= C Y)
     (= E G)
     (= F G)
     (= G Y)
     (not (<= V 0))
     (not (<= W 0))
     (or (not O) (not N) (= J H))
     (or (not O) (not N) (= K I))
     (or (not O) (not N) (= R J))
     (or (not O) (not N) (= S K))
     (or (not O) (not N) (= L 0))
     (or (not O) (not N) (= M 0))
     (or (not O) (not N) (= P 0))
     (or (not O) (not N) (= Q M))
     (or (not O) (not N) (= T L))
     (or (not O) (not N) (= U P))
     (or (not N) (and O N))
     (= D true)
     (= N true)
     (= D (not (<= C 0))))
      )
      (main@bb18.i Q R S T U V W X Y)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Bool) (D Bool) (E Int) (F Int) (G Bool) (H Bool) (I Int) (J Int) (K (Array Int Int)) (L (Array Int Int)) (M Int) (N Int) (O (Array Int Int)) (P (Array Int Int)) (Q Int) (R Int) (S (Array Int Int)) (T (Array Int Int)) (U Int) (V Bool) (W Int) (X (Array Int Int)) (Y (Array Int Int)) (Z Int) (A1 Bool) (B1 Int) (C1 Int) (D1 (Array Int Int)) (E1 (Array Int Int)) (F1 Int) (G1 Int) (H1 Int) (I1 (Array Int Int)) (J1 (Array Int Int)) (K1 Int) (L1 Int) (M1 Bool) (N1 Bool) (O1 Int) (P1 Int) (Q1 (Array Int Int)) (R1 (Array Int Int)) (S1 Int) (T1 Int) (U1 Int) (V1 Int) (W1 Int) (X1 Int) ) 
    (=>
      (and
        (main@bb18.i C1 O L M R U1 V1 W1 X1)
        (let ((a!1 (or (not G) (= H (not (<= J (- 1)))))))
  (and (= A (* 16777216 X1))
       (= B (div A 16777216))
       (or (not G) D (not C))
       (or (not V) (<= V1 0) (not (<= F 0)))
       (or (not V) (not H) (not G))
       (or (not A1) (<= U1 0) (not (<= I 0)))
       (or (not A1) H (not G))
       (or (not N1) (and N1 A1) (and N1 V))
       (or (not N1) (not V) (= S K))
       (or (not N1) (not V) (= T L))
       (or (not N1) (not V) (= D1 S))
       (or (not N1) (not V) (= E1 T))
       (or (not N1) (not V) (= U M))
       (or (not N1) (not V) (= W N))
       (or (not N1) (not V) (= H1 W))
       (or (not N1) (not V) (= F1 U))
       (or (not N1) (not A1) (= X O))
       (or (not N1) (not A1) (= Y P))
       (or (not N1) (not A1) (= D1 X))
       (or (not N1) (not A1) (= E1 Y))
       (or (not N1) (not A1) (= H1 B1))
       (or (not N1) (not A1) (= Z Q))
       (or (not N1) (not A1) (= B1 R))
       (or (not N1) (not A1) (= F1 Z))
       (or (not N1) (not M1) (= I1 D1))
       (or (not N1) (not M1) (= J1 E1))
       (or (not N1) (not M1) (= Q1 I1))
       (or (not N1) (not M1) (= R1 J1))
       (or (not N1) (not M1) (= K1 F1))
       (or (not N1) (not M1) (= L1 G1))
       (or (not N1) (not M1) (= O1 H1))
       (or (not N1) (not M1) (= P1 L1))
       (or (not N1) (not M1) (= S1 K1))
       (or (not N1) (not M1) (= T1 O1))
       a!1
       (or (not G) (= E W1))
       (or (not G) (and G C))
       (or (not V) (= K (store O F J)))
       (or (not V) (= F (+ V1 R)))
       (or (not V) (= N (+ 1 R)))
       (or (not V) (not (<= V1 0)))
       (or (not V) (and V G))
       (or (not A1) (= P (store L I J)))
       (or (not A1) (= I (+ U1 M)))
       (or (not A1) (= Q (+ 1 M)))
       (or (not A1) (not (<= U1 0)))
       (or (not A1) (and A1 G))
       (or (not M1) (and N1 M1))
       (or (not N1) (= G1 (+ 1 C1)))
       (= M1 true)
       (= D (not (<= B C1)))))
      )
      (main@bb18.i P1 Q1 R1 S1 T1 U1 V1 W1 X1)
    )
  )
)
(assert
  (forall ( (A (Array Int Int)) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Bool) (J Bool) (K Bool) (L Int) (M (Array Int Int)) (N Int) (O Int) (P Int) ) 
    (=>
      (and
        (main@bb18.i G A M N B O C D E)
        (and (= F (* 16777216 E))
     (= H (div F 16777216))
     (or (not K) (not J) (= L 0))
     (or (not K) (not J) (= P L))
     (or (not K) (not J) (not I))
     (or (not J) (and K J))
     (= J true)
     (= I (not (<= H G))))
      )
      (main@bb52.i M N O P)
    )
  )
)
(assert
  (forall ( (A Bool) (B Bool) (C Int) (D Int) (E Bool) (F Bool) (G Int) (H Int) (I Bool) (J Bool) (K Int) (L (Array Int Int)) (M Int) (N Int) (O Int) ) 
    (=>
      (and
        (main@bb52.i L M N G)
        (let ((a!1 (or (not E) (= F (not (<= D (- 1)))))))
  (and (or (not E) (<= N 0) (not (<= C 0)))
       (or (not J) (not E) F)
       (or (not J) (not I) (= K H))
       (or (not J) (not I) (= O K))
       a!1
       (or (not E) (= D (select L C)))
       (or (not E) (= C (+ N G)))
       (or (not E) (not (<= N 0)))
       (or (not E) (and E B))
       (or (not I) (and J I))
       (or (not J) (= H (+ 1 G)))
       (or (not J) (and J E))
       (= A true)
       (= I true)
       (= A (not (<= M G)))))
      )
      (main@bb52.i L M N O)
    )
  )
)
(assert
  (forall ( (A Int) (B Bool) (C Bool) (D Int) (E Int) (F (Array Int Int)) (G Int) (H Int) (I Bool) (J Bool) (K Bool) (L Bool) (M Bool) ) 
    (=>
      (and
        (main@bb52.i F A E D)
        (let ((a!1 (or (not I) (= J (not (<= H (- 1)))))))
  (and (or (not I) (<= E 0) (not (<= G 0)))
       (or (not K) (not J) (not I))
       a!1
       (or (not I) (= G (+ E D)))
       (or (not I) (= H (select F G)))
       (or (not I) (not (<= E 0)))
       (or (not I) (and C I))
       (or (not K) (and K I))
       (or (not L) (and L K))
       (or (not M) (and M L))
       (= M true)
       (= B true)
       (= B (not (<= A D)))))
      )
      main@verifier.error.split
    )
  )
)
(assert
  (forall ( (CHC_COMP_UNUSED Bool) ) 
    (=>
      (and
        main@verifier.error.split
        true
      )
      false
    )
  )
)

(check-sat)
(exit)
