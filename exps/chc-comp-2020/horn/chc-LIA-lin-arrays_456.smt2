; sv-comp/./ALIA/liquid-haskell/vector0.hs.fq.out.6_000.smt2
(set-logic HORN)


(assert
  (forall ( (A Int) (B Int) (C Int) (D (Array Int Bool)) (E Int) (F (Array Int Int)) (G (Array Int Int)) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int) (U Int) (V Int) (W Int) (X Int) (Y (Array Int Int)) (Z Int) (A1 Int) ) 
    (=>
      (and
        (and (= (select D L) (not (<= J K)))
     (select D X)
     (select D W)
     (= (select Y Z) (select G A1))
     (= (select G A1) (+ 1 (select G I)))
     (= (select G V) (+ 1 (select G U)))
     (= (select G U) 0)
     (= (select G I) (+ 1 (select G H)))
     (= (select G H) (+ 1 (select G V)))
     (= (select F C) C)
     (= (select F B) B)
     (= (select F A) A)
     (= T 4)
     (= S 3)
     (= R 2)
     (= Q 1)
     (= P 0)
     (= N 3)
     (= M (select Y Z))
     (= K 0)
     (= J (select Y Z))
     (= E 0)
     (= E P)
     (>= (select Y Z) 0)
     (>= (select G A1) 0)
     (>= (select G V) 0)
     (>= (select G U) 0)
     (>= (select G I) 0)
     (>= (select G H) 0)
     (>= M 0)
     (>= J 0)
     (or (not (<= 0 E)) (<= (select Y Z) E))
     (= (select D O) (not (<= M N))))
      )
      false
    )
  )
)

(check-sat)
(exit)
