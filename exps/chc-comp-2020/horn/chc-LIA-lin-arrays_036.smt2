; quic3/./data/array_monotonic_set_000.smt2
(set-logic HORN)

(declare-fun |main@bb32.i| ( (Array Int Int) (Array Int Int) Int Int Int Int ) Bool)
(declare-fun |main@verifier.error.split| ( ) Bool)
(declare-fun |main@entry| ( Int Int ) Bool)
(declare-fun |main@bb11.i| ( Int (Array Int Int) (Array Int Int) Int Int Int Int ) Bool)

(assert
  (forall ( (A Int) (B Int) ) 
    (=>
      (and
        true
      )
      (main@entry A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Bool) (D (Array Int Int)) (E (Array Int Int)) (F (Array Int Int)) (G (Array Int Int)) (H Bool) (I Bool) (J Int) (K Int) (L (Array Int Int)) (M (Array Int Int)) (N Int) (O Int) (P Int) (Q Int) ) 
    (=>
      (and
        (main@entry O B)
        (and (= A B)
     (not (<= N 0))
     (not (<= P 0))
     (or (not I) (not H) (= F D))
     (or (not I) (not H) (= G E))
     (or (not I) (not H) (= L F))
     (or (not I) (not H) (= M G))
     (or (not I) (not H) (= J 0))
     (or (not I) (not H) (= K J))
     (or (not H) (and I H))
     (= C true)
     (= H true)
     (= C (not (<= Q 0))))
      )
      (main@bb11.i K L M N O P Q)
    )
  )
)
(assert
  (forall ( (A Bool) (B Bool) (C Int) (D (Array Int Int)) (E Int) (F Int) (G Int) (H (Array Int Int)) (I Bool) (J (Array Int Int)) (K Bool) (L (Array Int Int)) (M Bool) (N Bool) (O (Array Int Int)) (P Int) (Q (Array Int Int)) (R (Array Int Int)) (S Int) (T (Array Int Int)) (U (Array Int Int)) (V Bool) (W Bool) (X Int) (Y Int) (Z (Array Int Int)) (A1 (Array Int Int)) (B1 Int) (C1 Int) (D1 Int) (E1 Int) ) 
    (=>
      (and
        (main@bb11.i P D J B1 C1 D1 E1)
        (and (or (not K) (<= B1 0) (not (<= G 0)))
     (or (not M) (<= D1 0) (not (<= E 0)))
     (or (not M) B (not A))
     (or (not M) (not K) I)
     (or (not N) (not M) (= O J))
     (or (not N) (not M) (= R O))
     (or (not N) (not M) (not I))
     (or (not W) (and W K) (and N M))
     (or (not W) (not K) (= L H))
     (or (not W) (not K) (= R L))
     (or (not W) (not V) (= T Q))
     (or (not W) (not V) (= U R))
     (or (not W) (not V) (= Z T))
     (or (not W) (not V) (= A1 U))
     (or (not W) (not V) (= X S))
     (or (not W) (not V) (= Y X))
     (or (not K) (= H (store J G 20)))
     (or (not K) (= G (+ B1 P)))
     (or (not K) (not (<= B1 0)))
     (or (not K) (and M K))
     (or (not M) (= Q (store D E F)))
     (or (not M) (= I (= F 10)))
     (or (not M) (= C C1))
     (or (not M) (= E (+ D1 P)))
     (or (not M) (not (<= D1 0)))
     (or (not M) (and M A))
     (or (not N) M)
     (or (not V) (and W V))
     (or (not W) (= S (+ 1 P)))
     (= V true)
     (= B (not (<= E1 P))))
      )
      (main@bb11.i Y Z A1 B1 C1 D1 E1)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Bool) (D Bool) (E Bool) (F Int) (G (Array Int Int)) (H (Array Int Int)) (I Int) (J Int) (K Int) (L Int) ) 
    (=>
      (and
        (main@bb11.i B G H I A J L)
        (and (or (not E) (not D) (= F 0))
     (or (not E) (not D) (= K F))
     (or (not E) (not D) (not C))
     (or (not D) (and E D))
     (= D true)
     (= C (not (<= L B))))
      )
      (main@bb32.i G H I J K L)
    )
  )
)
(assert
  (forall ( (A Bool) (B Bool) (C Int) (D Int) (E Int) (F Int) (G Bool) (H Bool) (I Bool) (J Bool) (K Bool) (L Bool) (M Int) (N Int) (O Bool) (P Bool) (Q Int) (R (Array Int Int)) (S (Array Int Int)) (T Int) (U Int) (V Int) (W Int) ) 
    (=>
      (and
        (main@bb32.i R S T U M W)
        (and (or (not G) (<= T 0) (not (<= E 0)))
     (or (not J) (<= U 0) (not (<= C 0)))
     (or L (not J) (not G))
     (or (not L) (not K) (not J))
     (or I (not H) (not G))
     (or (not P) (and K J) (and H G))
     (or (not P) (not O) (= Q N))
     (or (not P) (not O) (= V Q))
     (or (not G) (= I (= F 20)))
     (or (not G) (= E (+ T M)))
     (or (not G) (= F (select S E)))
     (or (not G) (not (<= T 0)))
     (or (not G) (and J G))
     (or (not H) G)
     (or (not J) (= L (= D 10)))
     (or (not J) (= C (+ U M)))
     (or (not J) (= D (select R C)))
     (or (not J) (not (<= U 0)))
     (or (not J) (and J B))
     (or (not K) J)
     (or (not O) (and P O))
     (or (not P) (= N (+ 1 M)))
     (= A true)
     (= O true)
     (= A (not (<= W M))))
      )
      (main@bb32.i R S T U V W)
    )
  )
)
(assert
  (forall ( (A Int) (B Bool) (C Bool) (D Int) (E (Array Int Int)) (F Int) (G Int) (H Bool) (I Bool) (J Int) (K Int) (L (Array Int Int)) (M Int) (N Int) (O Bool) (P Bool) (Q Bool) (R Bool) (S Bool) ) 
    (=>
      (and
        (main@bb32.i E L K D J A)
        (and (or (not H) (<= D 0) (not (<= F 0)))
     (or (not O) (not (<= M 0)) (<= K 0))
     (or (not O) (not H) I)
     (or (not Q) (not P) (not O))
     (or (not H) (= I (= G 10)))
     (or (not H) (= F (+ D J)))
     (or (not H) (= G (select E F)))
     (or (not H) (not (<= D 0)))
     (or (not H) (and H C))
     (or (not O) (= P (= N 20)))
     (or (not O) (= N (select L M)))
     (or (not O) (= M (+ K J)))
     (or (not O) (not (<= K 0)))
     (or (not O) (and O H))
     (or (not Q) (and Q O))
     (or (not R) (and R Q))
     (or (not S) (and S R))
     (= B true)
     (= S true)
     (= B (not (<= A J))))
      )
      main@verifier.error.split
    )
  )
)
(assert
  (forall ( (CHC_COMP_UNUSED Bool) ) 
    (=>
      (and
        main@verifier.error.split
        true
      )
      false
    )
  )
)

(check-sat)
(exit)
