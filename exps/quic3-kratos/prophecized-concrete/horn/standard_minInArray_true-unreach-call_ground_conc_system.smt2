(set-logic HORN)
(declare-fun state (Bool Bool Bool Int Int Int (Array Int Int) Int Int) Bool)
(assert (forall ((|!pc[2]| Bool) (|!pc[1]| Bool) (|!pc[0]| Bool) (|!{i}| Int) (|!{N}| Int) (|!{min}| Int) (|!{a.1}| (Array Int Int)) (|!{x}| Int) (|proph0| Int) (|proph0.next| Int) (|nd<0>| Int) (|!{N}.next| Int) (|!{i}.next| Int) (|!{min}.next| Int) (|!{x}.next| Int) (|%{x}#1| Int) (|!{a.1}.next| (Array Int Int)) (|%{a.1}#1| (Array Int Int)) (|!pc[1].next| Bool) (|!pc[0].next| Bool) (|!pc[2].next| Bool) (|%{min}#2| Int) (|nd_char<0>| Int)) (=> (and (and (not |!pc[0]|) (not |!pc[1]|)) (not |!pc[2]|)) (state |!pc[2]| |!pc[1]| |!pc[0]| |!{i}| |!{N}| |!{min}| |!{a.1}| |!{x}| |proph0|))))
(assert (forall ((|!pc[2]| Bool) (|!pc[1]| Bool) (|!pc[0]| Bool) (|!{i}| Int) (|!{N}| Int) (|!{min}| Int) (|!{a.1}| (Array Int Int)) (|!{x}| Int) (|proph0| Int) (|proph0.next| Int) (|nd<0>| Int) (|!{N}.next| Int) (|!{i}.next| Int) (|!{min}.next| Int) (|!{x}.next| Int) (|%{x}#1| Int) (|!{a.1}.next| (Array Int Int)) (|%{a.1}#1| (Array Int Int)) (|!pc[1].next| Bool) (|!pc[0].next| Bool) (|!pc[2].next| Bool) (|%{min}#2| Int) (|nd_char<0>| Int)) (=> (and (state |!pc[2]| |!pc[1]| |!pc[0]| |!{i}| |!{N}| |!{min}| |!{a.1}| |!{x}| |proph0|) (let ((.def_19 (not |!pc[0]|))) (let ((.def_20 (not |!pc[1]|))) (let ((.def_22 (not |!pc[2]|))) (let ((.def_48 (not |!pc[1].next|))) (let ((.def_52 (not |!pc[2].next|))) (let ((.def_53 (and (and .def_48 |!pc[0].next|) .def_52))) (let ((.def_57 (<= |!{min}| (select |!{a.1}| |!{x}|)))) (let ((.def_59 (= |!{N}| |!{N}.next|))) (let ((.def_61 (= |!{i}| |!{i}.next|))) (let ((.def_63 (= |!{min}| |!{min}.next|))) (let ((.def_65 (= |!{x}| |!{x}.next|))) (let ((.def_67 (= |!{a.1}| |!{a.1}.next|))) (let ((.def_69 (<= |!{N}| |!{x}|))) (let ((.def_70 (not .def_69))) (let ((.def_75 (and .def_22 (and |!pc[1]| .def_19)))) (let ((.def_86 (and .def_63 (and .def_59 .def_61)))) (let ((.def_88 (and .def_67 (and (= (+ |!{x}| (* (- 1) |!{x}.next|)) (- 1)) .def_86)))) (let ((.def_91 (not |!pc[0].next|))) (let ((.def_93 (and .def_52 (and |!pc[1].next| .def_91)))) (let ((.def_113 (<= |!{N}| |!{i}|))) (let ((.def_128 (<= |!{min}| nd_char<0>))) (let ((.def_137 (and .def_22 (and |!pc[0]| .def_20)))) (and (= proph0 proph0.next) (or (or (or (and (and (not (<= nd<0> 0)) (and (and (and (and (= nd<0> |!{N}.next|) (= |!{i}.next| 0)) (= |!{min}.next| 0)) (= |!{x}.next| |%{x}#1|)) (= |!{a.1}.next| |%{a.1}#1|))) (and (and (and .def_19 .def_20) .def_22) .def_53)) (or (or (and (and (and (and (and (and (and (not .def_57) .def_59) .def_61) .def_63) .def_65) .def_67) .def_70) (and (and .def_52 (and |!pc[1].next| |!pc[0].next|)) .def_75)) (and (and .def_70 (and .def_57 .def_88)) (and .def_75 .def_93))) (and (and .def_67 (and .def_65 (and .def_63 (and .def_61 (and .def_59 .def_69))))) (and .def_75 (and |!pc[2].next| (and .def_48 .def_91)))))) (and .def_88 (and .def_93 (and .def_22 (and |!pc[1]| |!pc[0]|))))) (or (and (and (not .def_113) (and (and (and .def_65 (and (and .def_59 (= (+ |!{i}| (* (- 1) |!{i}.next|)) (- 1))) (= |!{min}.next| |%{min}#2|))) (= |!{a.1}.next| (store |!{a.1}| |!{i}| nd_char<0>))) (or (and (= |%{min}#2| nd_char<0>) (not .def_128)) (and .def_128 (= |!{min}| |%{min}#2|))))) (and .def_53 .def_137)) (and (and .def_113 (and .def_67 (and .def_86 (= |!{x}.next| 0)))) (and .def_93 .def_137)))))))))))))))))))))))))))) (state |!pc[2].next| |!pc[1].next| |!pc[0].next| |!{i}.next| |!{N}.next| |!{min}.next| |!{a.1}.next| |!{x}.next| |proph0.next|))))
(assert (forall ((|!pc[2]| Bool) (|!pc[1]| Bool) (|!pc[0]| Bool) (|!{i}| Int) (|!{N}| Int) (|!{min}| Int) (|!{a.1}| (Array Int Int)) (|!{x}| Int) (|proph0| Int) (|proph0.next| Int) (|nd<0>| Int) (|!{N}.next| Int) (|!{i}.next| Int) (|!{min}.next| Int) (|!{x}.next| Int) (|%{x}#1| Int) (|!{a.1}.next| (Array Int Int)) (|%{a.1}#1| (Array Int Int)) (|!pc[1].next| Bool) (|!pc[0].next| Bool) (|!pc[2].next| Bool) (|%{min}#2| Int) (|nd_char<0>| Int)) (=> (state |!pc[2]| |!pc[1]| |!pc[0]| |!{i}| |!{N}| |!{min}| |!{a.1}| |!{x}| |proph0|) (or (not (= |!{x}| proph0)) (not (and (not |!pc[2]|) (and |!pc[1]| |!pc[0]|)))))))
(check-sat)
