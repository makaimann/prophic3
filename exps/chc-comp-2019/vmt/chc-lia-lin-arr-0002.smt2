(set-info :source |printed by MathSAT|)
(declare-fun |.x{4}| () (Array Int Int))
(declare-fun |.x{8}| () (Array Int Int))
(declare-fun |.x{5}| () Int)
(declare-fun |.x{7}| () Int)
(declare-fun |.x{6}| () Int)
(declare-fun |.x{9}| () Int)
(declare-fun |.x{13}| () Int)
(define-fun .def_10 () Int (! |.x{5}| :next |.x{7}|))
(define-fun .def_35 () Bool (! (= .def_10 2) :init true))
(define-fun .def_8 () (Array Int Int) (! |.x{4}| :next |.x{8}|))
(define-fun .def_22 () (Array Int Int) (store .def_8 .def_10 .def_10))
(define-fun .def_23 () Int (select .def_8 .def_10))
(define-fun .def_24 () Int (+ .def_10 .def_23))
(define-fun .def_25 () (Array Int Int) (store .def_8 .def_10 .def_24))
(define-fun .def_27 () Bool (= .def_23 0))
(define-fun .def_28 () (Array Int Int) (ite .def_27 .def_25 .def_22))
(define-fun .def_29 () Bool (= .def_10 .def_23))
(define-fun .def_30 () (Array Int Int) (ite .def_29 .def_28 .def_22))
(define-fun .def_31 () Bool (= |.x{8}| .def_30))
(define-fun .def_12 () Int (! |.x{6}| :next |.x{9}|))
(define-fun .def_19 () Bool (<= .def_12 .def_10))
(define-fun .def_20 () Bool (not .def_19))
(define-fun .def_16 () Int (* (- 1) |.x{7}|))
(define-fun .def_17 () Int (+ .def_10 .def_16))
(define-fun .def_18 () Bool (= .def_17 (- 1)))
(define-fun .def_21 () Bool (and .def_18 .def_20))
(define-fun .def_32 () Bool (and .def_21 .def_31))
(define-fun .def_14 () Bool (= .def_12 |.x{9}|))
(define-fun .def_33 () Bool (! (and .def_14 .def_32) :trans true))
(define-fun .def_36 () Int (! |.x{13}| :next |.xpv{1}|))
(define-fun .def_42 () Bool (<= .def_36 0))
(define-fun .def_43 () Bool (not .def_42))
(define-fun .def_44 () Bool (and .def_19 .def_43))
(define-fun .def_40 () Bool (<= .def_12 .def_36))
(define-fun .def_41 () Bool (not .def_40))
(define-fun .def_45 () Bool (and .def_41 .def_44))
(define-fun .def_37 () Int (select .def_8 .def_36))
(define-fun .def_38 () Bool (= .def_36 .def_37))
(define-fun .def_39 () Bool (not .def_38))
(define-fun .def_46 () Bool (and .def_39 .def_45))
(define-fun .def_48 () Bool (! (not .def_46) :invar-property 0))
(assert true)
