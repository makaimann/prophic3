(set-info :source |printed by MathSAT|)
(declare-fun a_1 () (Array Int Int))
(declare-fun .x.3 () (Array Int Int))
(declare-fun i_0 () Int)
(declare-fun .x.4 () Int)
(declare-fun N_1 () Int)
(declare-fun .x.5 () Int)
(declare-fun .loc.2 () Bool)
(declare-fun .loc.3 () Bool)
(declare-fun i1_1 () Int)
(define-fun .def_8 () (Array Int Int) (! a_1 :next |.x.3|))
(define-fun .def_10 () Int (! i_0 :next |.x.4|))
(define-fun .def_12 () Int (! N_1 :next |.x.5|))
(define-fun .def_14 () Bool (! .loc.2 :next |.loc.3|))
(define-fun .def_50 () Int (! i1_1 :next |.xpv.1|))
(define-fun .def_48 () Bool (= .def_10 0))
(define-fun .def_16 () Bool (not .def_14))
(define-fun .def_49 () Bool (! (and .def_16 .def_48) :init true))
(define-fun .def_46 () Bool (= .def_12 .x.5))
(define-fun .def_39 () Bool (= .def_8 .x.3))
(define-fun .def_17 () Bool (<= .def_12 .def_10))
(define-fun .def_40 () Bool (and .def_17 .def_39))
(define-fun .def_38 () Bool (= .x.4 0))
(define-fun .def_41 () Bool (and .def_38 .def_40))
(define-fun .def_42 () Bool (and .def_16 .def_41))
(define-fun .def_32 () Int (select .def_8 .def_10))
(define-fun .def_33 () Int (+ .def_10 .def_32))
(define-fun .def_34 () (Array Int Int) (store .def_8 .def_10 .def_33))
(define-fun .def_35 () Bool (= .x.3 .def_34))
(define-fun .def_18 () Bool (not .def_17))
(define-fun .def_30 () Bool (and .def_14 .def_18))
(define-fun .def_21 () Int (* (- 1) .x.4))
(define-fun .def_22 () Int (+ .def_10 .def_21))
(define-fun .def_23 () Bool (= .def_22 (- 1)))
(define-fun .def_31 () Bool (and .def_23 .def_30))
(define-fun .def_36 () Bool (and .def_31 .def_35))
(define-fun .def_43 () Bool (or .def_36 .def_42))
(define-fun .def_44 () Bool (and .loc.3 .def_43))
(define-fun .def_27 () (Array Int Int) (store .def_8 .def_10 .def_10))
(define-fun .def_28 () Bool (= .x.3 .def_27))
(define-fun .def_25 () Bool (not .loc.3))
(define-fun .def_19 () Bool (and .def_16 .def_18))
(define-fun .def_24 () Bool (and .def_19 .def_23))
(define-fun .def_26 () Bool (and .def_24 .def_25))
(define-fun .def_29 () Bool (and .def_26 .def_28))
(define-fun .def_45 () Bool (or .def_29 .def_44))
(define-fun .def_47 () Bool (! (and .def_45 .def_46) :trans true))
(define-fun .def_61 () Bool (<= .def_50 0))
(define-fun .def_62 () Bool (not .def_61))
(define-fun .def_53 () Int (select .def_8 .def_50))
(define-fun .def_54 () Int (* (- 1) .def_53))
(define-fun .def_56 () Int (* 2 .def_50))
(define-fun .def_58 () Int (+ .def_56 .def_54))
(define-fun .def_59 () Bool (<= 0 .def_58))
(define-fun .def_51 () Bool (<= .def_12 .def_50))
(define-fun .def_52 () Bool (not .def_51))
(define-fun .def_60 () Bool (and .def_52 .def_59))
(define-fun .def_63 () Bool (and .def_60 .def_62))
(define-fun .def_64 () Bool (and .def_17 .def_63))
(define-fun .def_65 () Bool (and .def_14 .def_64))
(define-fun .def_67 () Bool (! (not .def_65) :invar-property 0))
(assert true)
