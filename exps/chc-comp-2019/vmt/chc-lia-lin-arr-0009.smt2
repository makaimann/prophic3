(set-info :source |printed by MathSAT|)
(declare-fun a_1 () (Array Int Int))
(declare-fun .x.5 () (Array Int Int))
(declare-fun i_0 () Int)
(declare-fun .y.10 () Int)
(declare-fun j_0 () Int)
(declare-fun .y.11 () Int)
(declare-fun N_1 () Int)
(declare-fun .y.12 () Int)
(declare-fun .y.5 () (Array Int Int))
(declare-fun b () (Array Int Int))
(declare-fun .y.6 () Int)
(declare-fun .x.6 () Int)
(declare-fun .y.7 () Int)
(declare-fun .x.7 () Int)
(declare-fun .y.8 () Int)
(declare-fun .x.8 () Int)
(declare-fun .loc.9 () Bool)
(declare-fun .loc.13 () Bool)
(declare-fun i1_1 () Int)
(define-fun .def_8 () (Array Int Int) (! a_1 :next |.x.5|))
(define-fun .def_10 () Int (! i_0 :next |.y.10|))
(define-fun .def_12 () Int (! j_0 :next |.y.11|))
(define-fun .def_14 () Int (! N_1 :next |.y.12|))
(define-fun .def_16 () (Array Int Int) (! .y.5 :next |b|))
(define-fun .def_18 () Int (! .y.6 :next |.x.6|))
(define-fun .def_20 () Int (! .y.7 :next |.x.7|))
(define-fun .def_22 () Int (! .y.8 :next |.x.8|))
(define-fun .def_24 () Bool (! .loc.9 :next |.loc.13|))
(define-fun .def_80 () Int (! i1_1 :next |.xpv.1|))
(define-fun .def_77 () Bool (= .def_12 0))
(define-fun .def_76 () Bool (= .def_10 0))
(define-fun .def_78 () Bool (and .def_76 .def_77))
(define-fun .def_26 () Bool (not .def_24))
(define-fun .def_79 () Bool (! (and .def_26 .def_78) :init true))
(define-fun .def_74 () Bool (= .def_8 .x.5))
(define-fun .def_68 () Bool (= .def_14 .x.8))
(define-fun .def_66 () Bool (= .x.7 0))
(define-fun .def_63 () Bool (= .def_12 .x.6))
(define-fun .def_27 () Bool (<= .def_14 .def_10))
(define-fun .def_64 () Bool (and .def_27 .def_63))
(define-fun .def_67 () Bool (and .def_64 .def_66))
(define-fun .def_69 () Bool (and .def_67 .def_68))
(define-fun .def_70 () Bool (and .def_26 .def_69))
(define-fun .def_60 () Bool (<= .def_22 .def_18))
(define-fun .def_61 () Bool (not .def_60))
(define-fun .def_56 () Int (select .def_8 .def_18))
(define-fun .def_57 () (Array Int Int) (store .def_16 .def_18 .def_56))
(define-fun .def_58 () Bool (= b .def_57))
(define-fun .def_52 () Int (* (- 1) .x.6))
(define-fun .def_53 () Int (+ .def_18 .def_52))
(define-fun .def_54 () Bool (= .def_53 (- 1)))
(define-fun .def_47 () Bool (= .def_20 .x.7))
(define-fun .def_45 () Bool (= .def_22 .x.8))
(define-fun .def_46 () Bool (and .def_24 .def_45))
(define-fun .def_48 () Bool (and .def_46 .def_47))
(define-fun .def_55 () Bool (and .def_48 .def_54))
(define-fun .def_59 () Bool (and .def_55 .def_58))
(define-fun .def_62 () Bool (and .def_59 .def_61))
(define-fun .def_71 () Bool (or .def_62 .def_70))
(define-fun .def_72 () Bool (and .loc.13 .def_71))
(define-fun .def_39 () Int (select .def_8 .def_10))
(define-fun .def_40 () Bool (<= .def_12 .def_39))
(define-fun .def_41 () Bool (not .def_40))
(define-fun .def_42 () Int (ite .def_41 .def_39 .def_12))
(define-fun .def_43 () Bool (= .y.11 .def_42))
(define-fun .def_35 () Int (* (- 1) .y.10))
(define-fun .def_36 () Int (+ .def_10 .def_35))
(define-fun .def_37 () Bool (= .def_36 (- 1)))
(define-fun .def_32 () Bool (= .def_14 .y.12))
(define-fun .def_30 () Bool (not .loc.13))
(define-fun .def_28 () Bool (not .def_27))
(define-fun .def_29 () Bool (and .def_26 .def_28))
(define-fun .def_31 () Bool (and .def_29 .def_30))
(define-fun .def_33 () Bool (and .def_31 .def_32))
(define-fun .def_38 () Bool (and .def_33 .def_37))
(define-fun .def_44 () Bool (and .def_38 .def_43))
(define-fun .def_73 () Bool (or .def_44 .def_72))
(define-fun .def_75 () Bool (! (and .def_73 .def_74) :trans true))
(define-fun .def_87 () Bool (<= .def_80 0))
(define-fun .def_88 () Bool (not .def_87))
(define-fun .def_83 () Int (select .def_16 .def_80))
(define-fun .def_84 () Bool (<= .def_20 .def_83))
(define-fun .def_85 () Bool (not .def_84))
(define-fun .def_81 () Bool (<= .def_22 .def_80))
(define-fun .def_82 () Bool (not .def_81))
(define-fun .def_86 () Bool (and .def_82 .def_85))
(define-fun .def_89 () Bool (and .def_86 .def_88))
(define-fun .def_90 () Bool (and .def_60 .def_89))
(define-fun .def_91 () Bool (and .def_24 .def_90))
(define-fun .def_93 () Bool (! (not .def_91) :invar-property 0))
(assert true)
