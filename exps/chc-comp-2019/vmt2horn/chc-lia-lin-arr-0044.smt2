(set-logic HORN)
(declare-fun state ((Array Int Int) Int Int Int Int Int Int Int Int Int) Bool)
(assert (forall ((|a_0| (Array Int Int)) (|i_0| Int) (|CC_0| Int) (|val1_0| Int) (|val2_0| Int) (|val3_0| Int) (|val4_0| Int) (|val5_0| Int) (|minval_0| Int) (|i1_0| Int) (|.x.7| Int) (|.x.6| Int) (|.x.5| Int) (|.x.4| Int) (|.x.3| Int) (|.x.2| Int) (|.x.1| Int) (|i1| Int) (|a5| (Array Int Int)) (|.xpv.1| Int)) (=> (and (and (and (and (and (and (= i_0 1) (= val5_0 2)) (= val4_0 5)) (= val3_0 7)) (= val2_0 3)) (not (<= CC_0 0))) (= val1_0 1)) (state |a_0| |i_0| |CC_0| |val1_0| |val2_0| |val3_0| |val4_0| |val5_0| |minval_0| |i1_0|))))
(assert (forall ((|a_0| (Array Int Int)) (|i_0| Int) (|CC_0| Int) (|val1_0| Int) (|val2_0| Int) (|val3_0| Int) (|val4_0| Int) (|val5_0| Int) (|minval_0| Int) (|i1_0| Int) (|.x.7| Int) (|.x.6| Int) (|.x.5| Int) (|.x.4| Int) (|.x.3| Int) (|.x.2| Int) (|.x.1| Int) (|i1| Int) (|a5| (Array Int Int)) (|.xpv.1| Int)) (=> (and (state |a_0| |i_0| |CC_0| |val1_0| |val2_0| |val3_0| |val4_0| |val5_0| |minval_0| |i1_0|) (let ((.def_60 (* 5 i_0))) (let ((.def_74 (ite (<= minval_0 val5_0) (store a_0 (+ .def_60 (- 5)) val5_0) (store a_0 (+ .def_60 (- 5)) 0)))) (let ((.def_78 (ite (<= minval_0 val4_0) (store .def_74 (+ .def_60 (- 4)) val4_0) (store .def_74 (+ .def_60 (- 4)) 0)))) (let ((.def_82 (ite (<= minval_0 val3_0) (store .def_78 (+ .def_60 (- 3)) val3_0) (store .def_78 (+ .def_60 (- 3)) 0)))) (let ((.def_86 (ite (<= minval_0 val2_0) (store .def_82 (+ .def_60 (- 2)) val2_0) (store .def_82 (+ .def_60 (- 2)) 0)))) (and (= minval_0 .x.7) (and (= val5_0 .x.6) (and (= val4_0 .x.5) (and (= val3_0 .x.4) (and (= val2_0 .x.3) (and (= val1_0 .x.2) (and (= CC_0 .x.1) (and (<= i_0 CC_0) (and (= (+ i_0 (* (- 1) i1)) (- 1)) (= (ite (<= minval_0 val1_0) (store .def_86 (+ .def_60 (- 1)) val1_0) (store .def_86 (+ .def_60 (- 1)) 0)) a5)))))))))))))))) (state |a5| |i1| |.x.1| |.x.2| |.x.3| |.x.4| |.x.5| |.x.6| |.x.7| |.xpv.1|))))
(assert (forall ((|a_0| (Array Int Int)) (|i_0| Int) (|CC_0| Int) (|val1_0| Int) (|val2_0| Int) (|val3_0| Int) (|val4_0| Int) (|val5_0| Int) (|minval_0| Int) (|i1_0| Int) (|.x.7| Int) (|.x.6| Int) (|.x.5| Int) (|.x.4| Int) (|.x.3| Int) (|.x.2| Int) (|.x.1| Int) (|i1| Int) (|a5| (Array Int Int)) (|.xpv.1| Int)) (=> (state |a_0| |i_0| |CC_0| |val1_0| |val2_0| |val3_0| |val4_0| |val5_0| |minval_0| |i1_0|) (let ((.def_105 (select a_0 i1_0))) (not (and (not (<= i_0 CC_0)) (and (<= 0 i1_0) (and (and (not (= .def_105 0)) (not (<= minval_0 .def_105))) (not (<= (+ (* 5 CC_0) (* (- 1) i1_0)) 0))))))))))
(check-sat)
