(set-logic HORN)
(declare-fun state ((Array Int Int) Int Int Bool Bool Int Int) Bool)
(assert (forall ((|a_3| (Array Int Int)) (|i_2| Int) (|N_3| Int) (|.loc.3| Bool) (|.loc.4| Bool) (|j_1| Int) (|i1_2| Int) (|.x.9| Int) (|.loc.5| Bool) (|.loc.6| Bool) (|.x.7| (Array Int Int)) (|.x.8| Int) (|.xtv.1| Int) (|.xpv.1| Int)) (=> (and (and (not .loc.3) (not .loc.4)) (= i_2 0)) (state |a_3| |i_2| |N_3| |.loc.3| |.loc.4| |j_1| |i1_2|))))
(assert (forall ((|a_3| (Array Int Int)) (|i_2| Int) (|N_3| Int) (|.loc.3| Bool) (|.loc.4| Bool) (|j_1| Int) (|i1_2| Int) (|.x.9| Int) (|.loc.5| Bool) (|.loc.6| Bool) (|.x.7| (Array Int Int)) (|.x.8| Int) (|.xtv.1| Int) (|.xpv.1| Int)) (=> (and (state |a_3| |i_2| |N_3| |.loc.3| |.loc.4| |j_1| |i1_2|) (let ((.def_17 (not .loc.3))) (let ((.def_18 (not .loc.4))) (let ((.def_26 (not .loc.5))) (let ((.def_31 (<= N_3 i_2))) (let ((.def_35 (and (and (= a_3 .x.7) .def_31) (= .x.8 0)))) (let ((.def_38 (not .def_31))) (let ((.def_45 (= (+ i_2 (* (- 1) .x.8)) (- 1)))) (let ((.def_50 (= .x.7 (store a_3 i_2 (+ j_1 (select a_3 i_2)))))) (let ((.def_53 (not (<= i_2 j_1)))) (let ((.def_60 (not .loc.6))) (and (= N_3 .x.9) (or (or (or (and (and .def_26 .loc.6) (or (and .def_18 (and .loc.3 .def_35)) (and (and (and (and .def_17 (and .loc.4 .def_38)) .def_45) .def_50) .def_53))) (and (and .def_17 (and .loc.5 (and .def_18 .def_35))) .def_60)) (and .def_60 (and .def_53 (and .def_50 (and .def_45 (and .loc.5 (and .def_18 (and .loc.3 .def_38)))))))) (and (= .x.7 (store a_3 i_2 j_1)) (and .def_60 (and .def_53 (and .def_45 (and .def_17 (and .def_26 (and .def_18 .def_38)))))))))))))))))))) (state |.x.7| |.x.8| |.x.9| |.loc.5| |.loc.6| |.xtv.1| |.xpv.1|))))
(assert (forall ((|a_3| (Array Int Int)) (|i_2| Int) (|N_3| Int) (|.loc.3| Bool) (|.loc.4| Bool) (|j_1| Int) (|i1_2| Int) (|.x.9| Int) (|.loc.5| Bool) (|.loc.6| Bool) (|.x.7| (Array Int Int)) (|.x.8| Int) (|.xtv.1| Int) (|.xpv.1| Int)) (=> (state |a_3| |i_2| |N_3| |.loc.3| |.loc.4| |j_1| |i1_2|) (not (and (and .loc.4 (not .loc.3)) (and (<= N_3 i_2) (and (not (<= i1_2 0)) (and (<= (+ (* 3 i1_2) (* (- 1) (select a_3 i1_2))) 0) (not (<= N_3 i1_2))))))))))
(check-sat)
