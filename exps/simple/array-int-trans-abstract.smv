-- This is an example with an array that is not directly involved in the property
-- but the array semantics are crucial to learn the invariant

-- I manually ran the abstraction refinement procedure on this example
-- one interesting property of this example is that it requires a ghost variable
--     or at least I haven't thought of a way to prove it without a ghost variable

-- first step abstracts mem to int, removes writes and replaces reads with UF
-- refinement 1: add initial state
-- refinement 2: if x is not y, then read stays the same
-- refinement 3: if next(x) equals y, then reading from it gets y - 3
-- refinement 4: reading from the next memory at y is y - 3 (encoding the write)
--               note: this didn't advance the bound, but intuitively I think it's necesary
-- refinement 5: introduce a prophecy variable memproph for read(mem, x) (want to maintain something about memory), need it in the property to introduce a prophecy index variable
-- refinement 6: introduce prophecy variable for x which is involved in a read now
-- refinement 7: add two transition rules that handle y = xproph and y != xproph cases
-- refinement 8: introduce prophecy variable for next(x) -- this finally increases the bound of the abstract CEX trace
-- refinement 9: add two transition rules that handle y = next_xproph and y != next_xproph cases
--               doesn't help -- really want a trailing var
-- refinement 10: introduce a ghost variable for x, xghost
-- refinement 11: introduce a prophecy variable for xghost

MODULE main

VAR
--  mem : array integer of integer;
  mem : integer;
  res : integer;
  x : integer;
  y : integer;
  inc_x : boolean;
  inc_y : boolean;
  xghost : integer;

FUN
  read : integer * integer -> integer;

FROZENVAR
  memproph     : integer;
  xproph       : integer;
  next_xproph  : integer;
  xghost_proph : integer;

-- just for easier debugging
INIT mem = 0
TRANS next(mem) = mem + 1

INIT x = 2

INIT y = 3

INIT res = 0 

--INIT mem = CONSTARRAY(typeof(mem), 0)
INIT read(mem, x) = 0

INVAR x = y -> !inc_x

TRANS next(x) = (inc_x ? x + 1 : x)

TRANS next(y) = (inc_y ? y + 1 : y)

-- --------------- ghost update -----------------
TRANS next(xghost) = x

-- --------------- refinements -----------------
TRANS x != y -> read(next(mem), x) = read(mem, x)
TRANS next(x) = y -> read(next(mem), next(x)) = y - 3
TRANS read(next(mem), y) = y - 3
TRANS y = xproph -> (read(next(mem), xproph) = y - 3)
TRANS y != xproph -> (read(next(mem), xproph) = read(mem, xproph))
TRANS y = next_xproph -> (read(next(mem), next_xproph) = y - 3)
TRANS y != next_xproph -> (read(next(mem), next_xproph) = read(mem, next_xproph))
TRANS y = xghost_proph -> (read(next(mem), xghost_proph) = y - 3)
TRANS y != xghost_proph -> (read(next(mem), xghost_proph) = read(mem, xghost_proph))

--TRANS next(mem) = WRITE(mem, y, y - 3)

--TRANS next(res) = READ(mem, x)
TRANS next(res) = read(mem, x)

INVARSPEC (xghost_proph = xghost) -> (next_xproph = next(x) -> ((xproph = x) -> ((memproph = read(memproph, xproph)) -> (res + 1 < xproph))))