(set-info :source |printed by MathSAT|)
(declare-fun mem__AT0 () (_ BitVec 4))
(declare-fun x__AT0 () (_ BitVec 4))
(declare-fun y__AT0 () (_ BitVec 4))
(declare-fun inc_x__AT0 () Bool)
(declare-fun inc_y__AT0 () Bool)
(declare-fun xproph__AT0 () (_ BitVec 4))
(declare-fun data0__AT0 () (_ BitVec 4))
(declare-fun data1__AT0 () (_ BitVec 4))
(declare-fun mem__AT1 () (_ BitVec 4))
(declare-fun x__AT1 () (_ BitVec 4))
(declare-fun y__AT1 () (_ BitVec 4))
(declare-fun inc_x__AT1 () Bool)
(declare-fun xproph__AT1 () (_ BitVec 4))
(declare-fun data0__AT1 () (_ BitVec 4))
(declare-fun data1__AT1 () (_ BitVec 4))
(declare-fun read ((_ BitVec 4) (_ BitVec 4)) (_ BitVec 4))
(define-fun .def_9 () (_ BitVec 4) (! x__AT0 :next x__AT1))
(define-fun .def_8 () (_ BitVec 4) (! mem__AT0 :next mem__AT1))
(define-fun .def_36 () (_ BitVec 4) (read .def_8 .def_9))
(define-fun .def_37 () Bool (= .def_36 #b0000))
(define-fun .def_10 () (_ BitVec 4) (! y__AT0 :next y__AT1))
(define-fun .def_34 () (_ BitVec 4) (read .def_8 .def_10))
(define-fun .def_35 () Bool (= .def_34 #b0000))
(define-fun .def_38 () Bool (and .def_35 .def_37))
(define-fun .def_13 () (_ BitVec 4) (! xproph__AT0 :next xproph__AT1))
(define-fun .def_32 () (_ BitVec 4) (read .def_8 .def_13))
(define-fun .def_33 () Bool (= .def_32 #b0000))
(define-fun .def_39 () Bool (and .def_33 .def_38))
(define-fun .def_31 () Bool (= .def_9 #b0000))
(define-fun .def_40 () Bool (and .def_31 .def_39))
(define-fun .def_29 () Bool (= .def_10 #b0001))
(define-fun .def_41 () Bool (and .def_29 .def_40))
(define-fun .def_25 () Bool (= .def_9 .def_10))
(define-fun .def_26 () Bool (not .def_25))
(define-fun .def_11 () Bool (! inc_x__AT0 :next inc_x__AT1))
(define-fun .def_24 () Bool (not .def_11))
(define-fun .def_27 () Bool (or .def_24 .def_26))
(define-fun .def_42 () Bool (! (and .def_27 .def_41) :init true))
(define-fun .def_71 () Bool (= x__AT1 y__AT1))
(define-fun .def_72 () Bool (not .def_71))
(define-fun .def_70 () Bool (not inc_x__AT1))
(define-fun .def_73 () Bool (or .def_70 .def_72))
(define-fun .def_74 () Bool (and .def_27 .def_73))
(define-fun .def_67 () Bool (= .def_13 xproph__AT1))
(define-fun .def_14 () (_ BitVec 4) (! data0__AT0 :next data0__AT1))
(define-fun .def_66 () Bool (= .def_14 data0__AT1))
(define-fun .def_68 () Bool (and .def_66 .def_67))
(define-fun .def_15 () (_ BitVec 4) (! data1__AT0 :next data1__AT1))
(define-fun .def_65 () Bool (= .def_15 data1__AT1))
(define-fun .def_69 () Bool (and .def_65 .def_68))
(define-fun .def_75 () Bool (and .def_69 .def_74))
(define-fun .def_57 () (_ BitVec 1) ((_ extract 0 0) .def_10))
(define-fun .def_58 () Bool (= .def_57 #b1))
(define-fun .def_59 () (_ BitVec 4) (ite .def_58 .def_15 .def_14))
(define-fun .def_51 () (_ BitVec 4) (read mem__AT1 .def_13))
(define-fun .def_60 () Bool (= .def_51 .def_59))
(define-fun .def_53 () Bool (= .def_10 .def_13))
(define-fun .def_54 () Bool (not .def_53))
(define-fun .def_61 () Bool (or .def_54 .def_60))
(define-fun .def_52 () Bool (= .def_32 .def_51))
(define-fun .def_55 () Bool (or .def_52 .def_53))
(define-fun .def_62 () Bool (and .def_55 .def_61))
(define-fun .def_48 () (_ BitVec 4) (bvadd #b0001 .def_9))
(define-fun .def_49 () (_ BitVec 4) (ite .def_11 .def_48 .def_9))
(define-fun .def_50 () Bool (= x__AT1 .def_49))
(define-fun .def_63 () Bool (and .def_50 .def_62))
(define-fun .def_44 () (_ BitVec 4) (bvadd #b0001 .def_10))
(define-fun .def_12 () Bool (! inc_y__AT0 :next inc_y__AT1))
(define-fun .def_45 () (_ BitVec 4) (ite .def_12 .def_44 .def_10))
(define-fun .def_46 () Bool (= y__AT1 .def_45))
(define-fun .def_64 () Bool (and .def_46 .def_63))
(define-fun .def_76 () Bool (! (and .def_64 .def_75) :trans true))
(define-fun .def_82 () Bool (= .def_9 .def_13))
(define-fun .def_83 () Bool (not .def_82))
(define-fun .def_78 () (_ BitVec 1) ((_ extract 0 0) .def_9))
(define-fun .def_79 () Bool (= .def_78 #b1))
(define-fun .def_80 () Bool (not .def_79))
(define-fun .def_77 () Bool (= .def_15 .def_36))
(define-fun .def_81 () Bool (or .def_77 .def_80))
(define-fun .def_84 () Bool (! (or .def_81 .def_83) :invar-property 0))
(assert true)
