-- step 1: abstract
-- step 2: fails in state 1 -- add initial state for x and y and lemma about equality
-- step 3: fails in state 2 with incorrect array update -- add update rule for mem2 and y
-- step 4: fails in state 2 with incorrect value at mem1[1], should have stayed constant -- add prophecy variable for x and refine the transition
-- step 5: fails in state 3 because of incorrect initial state at prophecy var -- refine initial state

MODULE main

VAR
  mem1 : integer;
  mem2 : integer;
  x : integer;
  y : integer;

FROZENVAR
  -- step 4 refinement -- prophecy var
  xproph : integer;

FUN
  equal : integer * integer -> boolean;
  read1 : integer * integer -> integer;
  read2 : integer * integer -> integer;

INIT x = 0

INIT y = 1

-- INIT mem1 = CONSTARRAY(typeof(mem1), 0)
-- INIT mem2 = WRITE(CONSTARRAY(typeof(mem2), 0), 1, 2)

TRANS next(x) = x + 1

TRANS next(y) = y + 1

-- TRANS next(mem1) = WRITE(mem1, x, x)
-- TRANS next(mem2) = WRITE(mem2, y, y)

-- step 2 refinement
-- initial state refinement
INIT read1(mem1, x) = 0
INIT read1(mem1, y) = 0
INIT y != 1 -> read2(mem2, y) = 0
INIT read2(mem2, 1) = 2
-- how that relates to array equality
INVAR (read1(mem1, x) != read2(mem2, x)) -> !(equal(mem1, mem2))
INVAR (read1(mem1, y) != read2(mem2, y)) -> !(equal(mem1, mem2))

-- step 3 refinement
TRANS read2(next(mem2), y) = y

-- step 4 refinement
TRANS xproph != x -> (read1(next(mem1), xproph) = read1(mem1, xproph))

-- step 5 refinement
INIT read1(mem1, xproph) = 0

-- INVARSPEC mem1 != mem2

-- step 1 abstract
-- INVARSPEC !(equal(mem1, mem2))

-- step 4 refinement
INVARSPEC xproph=x -> !(equal(mem1, mem2))