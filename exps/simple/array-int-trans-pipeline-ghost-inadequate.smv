-- This is an example with an array that is not directly involved in the property
-- but the array semantics are crucial to learn the invariant

-- similar to array-int-trans-abstract.smv except that there's an extra delay after the array read
-- e.g. the array read goes into an uninterruptible two stage pipeline
-- the only way I could get this to prove was with two ghost variables (a way to point to x from two states previously)

MODULE main

VAR
--  mem : array integer of integer;
  mem : integer;
  res_pipe : integer;
  res : integer;
  x : integer;
  y : integer;
  inc_x : boolean;
  inc_y : boolean;
  xghost : integer;
  xghost2 : integer;

FUN
  read : integer * integer -> integer;

-- - just for simpler debugging
INIT mem = 0
TRANS next(mem) = mem + 1

INIT x = 2

INIT y = 3

INIT res_pipe = 0
INIT res = 0

-- INIT mem = CONSTARRAY(typeof(mem), 0)

TRANS next(x) = (inc_x ? x + 1 : x)

TRANS next(y) = (inc_y ? y + 1 : y)

INVAR x = y -> !inc_x

-- TRANS next(mem) = WRITE(mem, y, y - 3)

-- TRANS next(res_pipe) = READ(mem, x)
TRANS next(res_pipe) = read(mem, x)

TRANS next(res) = res_pipe

-- ---------------- ghost vars --------------
TRANS next(xghost) = x
TRANS next(xghost2) = xghost

-- ---------------- refinement --------------
INIT read(mem, x) = 0
TRANS read(next(mem), y) = y - 3
TRANS x = y -> read(next(mem), x) = y - 3
TRANS x != y -> read(next(mem), x) = read(mem, x)
TRANS xghost = y -> read(next(mem), xghost) = y - 3
TRANS xghost != y -> read(next(mem), xghost) = read(mem, xghost)
TRANS xghost2 = y -> read(next(mem), xghost2) = y - 3
TRANS xghost2 != y -> read(next(mem), xghost2) = read(mem, xghost2)

INVARSPEC res + 1 < x