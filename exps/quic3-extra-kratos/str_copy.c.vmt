(set-info :source |printed by MathSAT|)
(declare-fun |!{a1.1}| () (Array Int Int))
(declare-fun |!{a1.1}.next| () (Array Int Int))
(declare-fun |!{a2.2}| () (Array Int Int))
(declare-fun |!{a2.2}.next| () (Array Int Int))
(declare-fun |!{N}| () Int)
(declare-fun |!{N}.next| () Int)
(declare-fun |!{i}| () Int)
(declare-fun |!{i}.next| () Int)
(declare-fun |!{len}| () Int)
(declare-fun |!{len}.next| () Int)
(declare-fun |!pc[0]| () Bool)
(declare-fun |!pc[0].next| () Bool)
(declare-fun |!pc[1]| () Bool)
(declare-fun |!pc[1].next| () Bool)
(declare-fun |!pc[2]| () Bool)
(declare-fun |!pc[2].next| () Bool)
(declare-fun nd<0> () Int)
(define-fun .def_35 () Bool (! |!pc[2]| :next |!pc[2].next|))
(define-fun .def_40 () Bool (not .def_35))
(define-fun .def_33 () Bool (! |!pc[1]| :next |!pc[1].next|))
(define-fun .def_38 () Bool (not .def_33))
(define-fun .def_31 () Bool (! |!pc[0]| :next |!pc[0].next|))
(define-fun .def_37 () Bool (not .def_31))
(define-fun .def_39 () Bool (and .def_37 .def_38))
(define-fun .def_41 () Bool (! (and .def_39 .def_40) :init true))
(define-fun .def_134 () Bool (and .def_31 .def_38))
(define-fun .def_166 () Bool (and .def_40 .def_134))
(define-fun .def_63 () Bool (not |!pc[2].next|))
(define-fun .def_61 () Bool (not |!pc[1].next|))
(define-fun .def_62 () Bool (and |!pc[0].next| .def_61))
(define-fun .def_64 () Bool (and .def_62 .def_63))
(define-fun .def_167 () Bool (and .def_64 .def_166))
(define-fun .def_14 () Int (! |!{i}| :next |!{i}.next|))
(define-fun .def_8 () (Array Int Int) (! |!{a1.1}| :next |!{a1.1}.next|))
(define-fun .def_146 () (Array Int Int) (store .def_8 .def_14 nd<0>))
(define-fun .def_154 () Bool (= |!{a1.1}.next| .def_146))
(define-fun .def_10 () (Array Int Int) (! |!{a2.2}| :next |!{a2.2}.next|))
(define-fun .def_78 () Bool (= .def_10 |!{a2.2}.next|))
(define-fun .def_155 () Bool (and .def_78 .def_154))
(define-fun .def_12 () Int (! |!{N}| :next |!{N}.next|))
(define-fun .def_80 () Bool (= .def_12 |!{N}.next|))
(define-fun .def_156 () Bool (and .def_80 .def_155))
(define-fun .def_89 () Int (* (- 1) |!{i}.next|))
(define-fun .def_90 () Int (+ .def_14 .def_89))
(define-fun .def_91 () Bool (= .def_90 (- 1)))
(define-fun .def_157 () Bool (and .def_91 .def_156))
(define-fun .def_16 () Int (! |!{len}| :next |!{len}.next|))
(define-fun .def_84 () Bool (= .def_16 |!{len}.next|))
(define-fun .def_158 () Bool (and .def_84 .def_157))
(define-fun .def_143 () Bool (<= .def_12 .def_14))
(define-fun .def_144 () Bool (not .def_143))
(define-fun .def_159 () Bool (and .def_144 .def_158))
(define-fun .def_168 () Bool (and .def_159 .def_167))
(define-fun .def_135 () Bool (and .def_35 .def_134))
(define-fun .def_106 () Bool (not |!pc[0].next|))
(define-fun .def_107 () Bool (and |!pc[1].next| .def_106))
(define-fun .def_108 () Bool (and .def_63 .def_107))
(define-fun .def_139 () Bool (and .def_108 .def_135))
(define-fun .def_77 () Bool (= .def_8 |!{a1.1}.next|))
(define-fun .def_79 () Bool (and .def_77 .def_78))
(define-fun .def_81 () Bool (and .def_79 .def_80))
(define-fun .def_57 () Bool (= |!{i}.next| 0))
(define-fun .def_131 () Bool (and .def_57 .def_81))
(define-fun .def_132 () Bool (and .def_84 .def_131))
(define-fun .def_69 () Int (select .def_8 .def_14))
(define-fun .def_122 () Bool (= .def_69 0))
(define-fun .def_133 () Bool (and .def_122 .def_132))
(define-fun .def_140 () Bool (and .def_133 .def_139))
(define-fun .def_136 () Bool (and |!pc[2].next| .def_62))
(define-fun .def_137 () Bool (and .def_135 .def_136))
(define-fun .def_124 () (Array Int Int) (store .def_10 .def_14 .def_69))
(define-fun .def_125 () Bool (= |!{a2.2}.next| .def_124))
(define-fun .def_126 () Bool (and .def_77 .def_125))
(define-fun .def_127 () Bool (and .def_80 .def_126))
(define-fun .def_128 () Bool (and .def_91 .def_127))
(define-fun .def_129 () Bool (and .def_84 .def_128))
(define-fun .def_123 () Bool (not .def_122))
(define-fun .def_130 () Bool (and .def_123 .def_129))
(define-fun .def_138 () Bool (and .def_130 .def_137))
(define-fun .def_141 () Bool (or .def_138 .def_140))
(define-fun .def_117 () Bool (and .def_31 .def_33))
(define-fun .def_118 () Bool (and .def_40 .def_117))
(define-fun .def_102 () Bool (and |!pc[0].next| |!pc[1].next|))
(define-fun .def_103 () Bool (and .def_63 .def_102))
(define-fun .def_119 () Bool (and .def_103 .def_118))
(define-fun .def_82 () Bool (= .def_14 |!{i}.next|))
(define-fun .def_83 () Bool (and .def_81 .def_82))
(define-fun .def_85 () Bool (and .def_83 .def_84))
(define-fun .def_120 () Bool (and .def_85 .def_119))
(define-fun .def_112 () Bool (and .def_61 .def_106))
(define-fun .def_113 () Bool (and |!pc[2].next| .def_112))
(define-fun .def_100 () Bool (and .def_33 .def_37))
(define-fun .def_101 () Bool (and .def_40 .def_100))
(define-fun .def_114 () Bool (and .def_101 .def_113))
(define-fun .def_66 () Int (select .def_10 .def_14))
(define-fun .def_67 () Bool (= .def_66 0))
(define-fun .def_95 () Bool (and .def_67 .def_77))
(define-fun .def_96 () Bool (and .def_78 .def_95))
(define-fun .def_97 () Bool (and .def_80 .def_96))
(define-fun .def_98 () Bool (and .def_82 .def_97))
(define-fun .def_99 () Bool (and .def_84 .def_98))
(define-fun .def_115 () Bool (and .def_99 .def_114))
(define-fun .def_109 () Bool (and .def_101 .def_108))
(define-fun .def_92 () Bool (and .def_81 .def_91))
(define-fun .def_93 () Bool (and .def_84 .def_92))
(define-fun .def_68 () Bool (not .def_67))
(define-fun .def_94 () Bool (and .def_68 .def_93))
(define-fun .def_110 () Bool (and .def_94 .def_109))
(define-fun .def_104 () Bool (and .def_101 .def_103))
(define-fun .def_70 () Bool (= .def_66 .def_69))
(define-fun .def_71 () Bool (not .def_70))
(define-fun .def_86 () Bool (and .def_71 .def_85))
(define-fun .def_87 () Bool (and .def_68 .def_86))
(define-fun .def_105 () Bool (and .def_87 .def_104))
(define-fun .def_111 () Bool (or .def_105 .def_110))
(define-fun .def_116 () Bool (or .def_111 .def_115))
(define-fun .def_121 () Bool (or .def_116 .def_120))
(define-fun .def_142 () Bool (or .def_121 .def_141))
(define-fun .def_170 () Bool (! (or .def_142 .def_168) :trans true))
(define-fun .def_171 () Bool (! (not .def_118) :invar-property 0))
(assert true)
