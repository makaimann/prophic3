(set-logic HORN)
(declare-fun state (Int Int Int Bool Int (Array Int Int) Int Bool Int (Array Int Int)) Bool)
(assert (forall ((|.x.14| Int) (|main@%.1.i_0_0| Int) (|main@%_1_0_0| Int) (|main@%assume.flag.0_0_0| Bool) (|main@%_5_0_0| Int) (|main@%shadow.mem.1_0_0| (Array Int Int)) (|main@%_2_0_0| Int) (|main@%_4_0_0| Bool) (|main@%.0.i1_0_0| Int) (|main@%shadow.mem.0_0_0| (Array Int Int)) (|main@%_1_1| Int) (|main@%_4_1| Bool) (|main@%_5_1| Int) (|main@%.0.i1_2| Int) (|.x.15| Int) (|.x.16| Int) (|.x.17| Bool) (|.x.18| (Array Int Int)) (|main@%shadow.mem.0_2| (Array Int Int)) (|main@%_2_1| Int)) (=> (= .x.14 0) (state |.x.14| |main@%.1.i_0_0| |main@%_1_0_0| |main@%assume.flag.0_0_0| |main@%_5_0_0| |main@%shadow.mem.1_0_0| |main@%_2_0_0| |main@%_4_0_0| |main@%.0.i1_0_0| |main@%shadow.mem.0_0_0|))))
(assert (forall ((|.x.14| Int) (|main@%.1.i_0_0| Int) (|main@%_1_0_0| Int) (|main@%assume.flag.0_0_0| Bool) (|main@%_5_0_0| Int) (|main@%shadow.mem.1_0_0| (Array Int Int)) (|main@%_2_0_0| Int) (|main@%_4_0_0| Bool) (|main@%.0.i1_0_0| Int) (|main@%shadow.mem.0_0_0| (Array Int Int)) (|main@%_1_1| Int) (|main@%_4_1| Bool) (|main@%_5_1| Int) (|main@%.0.i1_2| Int) (|.x.15| Int) (|.x.16| Int) (|.x.17| Bool) (|.x.18| (Array Int Int)) (|main@%shadow.mem.0_2| (Array Int Int)) (|main@%_2_1| Int)) (=> (and (state |.x.14| |main@%.1.i_0_0| |main@%_1_0_0| |main@%assume.flag.0_0_0| |main@%_5_0_0| |main@%shadow.mem.1_0_0| |main@%_2_0_0| |main@%_4_0_0| |main@%.0.i1_0_0| |main@%shadow.mem.0_0_0|) (let ((.def_23 (<= main@%_1_1 0))) (let ((.def_24 (not .def_23))) (let ((.def_36 (= .x.15 1))) (let ((.def_39 (= main@%.1.i_0_0 .x.16))) (let ((.def_42 (= main@%assume.flag.0_0_0 .x.17))) (let ((.def_45 (= main@%shadow.mem.1_0_0 .x.18))) (let ((.def_50 (= .x.16 0))) (let ((.def_53 (= .x.15 2))) (let ((.def_55 (= main@%.0.i1_0_0 main@%.0.i1_2))) (let ((.def_58 (= main@%shadow.mem.0_0_0 main@%shadow.mem.0_2))) (let ((.def_68 (store main@%shadow.mem.0_0_0 (+ main@%_5_0_0 main@%.0.i1_0_0) main@%_2_0_0))) (let ((.def_72 (<= (+ main@%_1_0_0 (* (- 1) main@%.0.i1_0_0)) 2))) (let ((.def_79 (<= main@%_5_0_0 0))) (let ((.def_80 (or (not (<= (+ main@%_5_0_0 main@%.0.i1_0_0) 0)) .def_79))) (let ((.def_82 (not .def_79))) (let ((.def_87 (= .x.14 1))) (let ((.def_89 (= main@%_1_0_0 main@%_1_1))) (let ((.def_91 (= main@%_5_0_0 main@%_5_1))) (let ((.def_94 (= main@%_2_0_0 main@%_2_1))) (let ((.def_96 (= main@%_4_0_0 main@%_4_1))) (let ((.def_119 (not (<= main@%_1_0_0 main@%.1.i_0_0)))) (let ((.def_133 (or .def_79 (not (<= (+ main@%.1.i_0_0 main@%_5_0_0) 0))))) (let ((.def_136 (<= main@%_2_0_0 (select main@%shadow.mem.1_0_0 (+ main@%.1.i_0_0 main@%_5_0_0))))) (let ((.def_140 (= .x.14 2))) (or (or (or (or (and (and (= .def_24 main@%_4_1) (and (= .x.14 0) (not (<= main@%_5_1 0)))) (or (and (= main@%.0.i1_2 0) (and (and (and (and .def_24 .def_36) .def_39) .def_42) .def_45)) (and (and (and (and (and .def_23 (= main@%_4_1 .x.17)) .def_50) .def_53) .def_55) .def_58))) (and (and (and (and (and (and (= (+ main@%.0.i1_0_0 (* (- 1) main@%.0.i1_2)) (- 2)) (and (= main@%shadow.mem.0_2 .def_68) (and (not .def_72) (and (and (and .def_45 (and .def_42 (and .def_36 .def_39))) .def_80) .def_82)))) .def_87) .def_89) .def_91) .def_94) .def_96)) (and (= main@%_4_0_0 .x.17) (and (= .x.18 .def_68) (and .def_96 (and .def_94 (and .def_91 (and .def_89 (and .def_87 (and .def_72 (and .def_82 (and .def_80 (and .def_58 (and .def_55 (and .def_50 .def_53)))))))))))))) (and (and (= (+ main@%.1.i_0_0 (* (- 1) .x.16)) (- 2)) (and (= .x.17 (and main@%assume.flag.0_0_0 .def_119)) (and (and (and .def_96 (and .def_94 (and .def_91 (and .def_89 (and .def_82 (and .def_58 (and .def_55 (and .def_45 .def_53)))))))) .def_133) .def_136))) .def_140)) (and (= .x.15 3) (and (not .def_136) (and .def_140 (and .def_119 (and .def_133 (and .def_96 (and .def_94 (and .def_91 (and .def_89 (and .def_82 (and .def_58 (and .def_55 (and .def_45 (and .def_42 (and main@%assume.flag.0_0_0 .def_39))))))))))))))))))))))))))))))))))))))))) (state |.x.15| |.x.16| |main@%_1_1| |.x.17| |main@%_5_1| |.x.18| |main@%_2_1| |main@%_4_1| |main@%.0.i1_2| |main@%shadow.mem.0_2|))))
(assert (forall ((|.x.14| Int) (|main@%.1.i_0_0| Int) (|main@%_1_0_0| Int) (|main@%assume.flag.0_0_0| Bool) (|main@%_5_0_0| Int) (|main@%shadow.mem.1_0_0| (Array Int Int)) (|main@%_2_0_0| Int) (|main@%_4_0_0| Bool) (|main@%.0.i1_0_0| Int) (|main@%shadow.mem.0_0_0| (Array Int Int)) (|main@%_1_1| Int) (|main@%_4_1| Bool) (|main@%_5_1| Int) (|main@%.0.i1_2| Int) (|.x.15| Int) (|.x.16| Int) (|.x.17| Bool) (|.x.18| (Array Int Int)) (|main@%shadow.mem.0_2| (Array Int Int)) (|main@%_2_1| Int)) (=> (state |.x.14| |main@%.1.i_0_0| |main@%_1_0_0| |main@%assume.flag.0_0_0| |main@%_5_0_0| |main@%shadow.mem.1_0_0| |main@%_2_0_0| |main@%_4_0_0| |main@%.0.i1_0_0| |main@%shadow.mem.0_0_0|) (not (= .x.14 3)))))
(check-sat)
