(set-info :source |printed by MathSAT|)
(declare-fun data__AT0 () (_ BitVec 8))
(declare-fun x__AT0 () (_ BitVec 4))
(declare-fun y__AT0 () (_ BitVec 4))
(declare-fun arr0__AT0 () (Array (_ BitVec 4) (_ BitVec 8)))
(declare-fun arr1__AT0 () (Array (_ BitVec 4) (_ BitVec 8)))
(declare-fun x__AT1 () (_ BitVec 4))
(declare-fun y__AT1 () (_ BitVec 4))
(declare-fun arr0__AT1 () (Array (_ BitVec 4) (_ BitVec 8)))
(declare-fun arr1__AT1 () (Array (_ BitVec 4) (_ BitVec 8)))
(define-fun .def_10 () (_ BitVec 4) (! y__AT0 :next y__AT1))
(define-fun .def_9 () (_ BitVec 4) (! x__AT0 :next x__AT1))
(define-fun .def_19 () Bool (= .def_9 .def_10))
(define-fun .def_12 () (Array (_ BitVec 4) (_ BitVec 8)) (! arr1__AT0 :next arr1__AT1))
(define-fun .def_11 () (Array (_ BitVec 4) (_ BitVec 8)) (! arr0__AT0 :next arr0__AT1))
(define-fun .def_18 () Bool (! (= .def_11 .def_12) :invar-property 0))
;; doesn't change problem, just added third conjunct for testing
(define-fun .def_20 () Bool (! (and .def_18 (and .def_19 (= arr1__AT0 (store arr0__AT0 x__AT0 (select arr1__AT0 x__AT0))))) :init true))
(define-fun .def_30 () (Array (_ BitVec 4) (_ BitVec 8)) (store .def_11 .def_9 data__AT0))
(define-fun .def_31 () Bool (= arr0__AT1 .def_30))
(define-fun .def_28 () (Array (_ BitVec 4) (_ BitVec 8)) (store .def_12 .def_10 data__AT0))
(define-fun .def_29 () Bool (= arr1__AT1 .def_28))
(define-fun .def_32 () Bool (and .def_29 .def_31))
(define-fun .def_26 () (_ BitVec 4) (bvadd #b0001 .def_9))
(define-fun .def_27 () Bool (= x__AT1 .def_26))
(define-fun .def_33 () Bool (and .def_27 .def_32))
(define-fun .def_23 () (_ BitVec 4) (bvadd #b0001 .def_10))
(define-fun .def_24 () Bool (= y__AT1 .def_23))
(define-fun .def_34 () Bool (! (and .def_24 .def_33) :trans true))
(assert true)
