;; given to me by Ahmed
;; it's the example from Per Bjesse's paper on Word-Level Sequential Memory Abstraction
;; but using a ghost-literal abstraction developed by Ken McMillan
(set-info :source |printed by MathSAT|)
(declare-fun data__AT0 () Real)
(declare-fun waddr__AT0 () Int)
(declare-fun raddr__AT0 () Int)
(declare-fun a__AT0 () (Array Int Real))
(declare-fun raddr__AT1 () Int)
(declare-fun a__AT1 () (Array Int Real))
(define-fun .def_16 () (Array Int Real) ((as const (Array Int Real)) (to_real 0)))
(define-fun .def_10 () (Array Int Real) (! a__AT0 :next a__AT1))
(define-fun .def_17 () Bool (! (= .def_10 .def_16) :init true))
(define-fun .def_9 () Int (! raddr__AT0 :next raddr__AT1))
(define-fun .def_27 () Bool (= .def_9 raddr__AT1))
(define-fun .def_23 () (Array Int Real) (store .def_10 waddr__AT0 data__AT0))
(define-fun .def_24 () Bool (= a__AT1 .def_23))
(define-fun .def_20 () Bool (<= (to_real 2) data__AT0))
(define-fun .def_25 () Bool (or .def_20 .def_24))
(define-fun .def_21 () Bool (not .def_20))
(define-fun .def_18 () Bool (= .def_10 a__AT1))
(define-fun .def_22 () Bool (or .def_18 .def_21))
(define-fun .def_26 () Bool (and .def_22 .def_25))
(define-fun .def_28 () Bool (! (and .def_26 .def_27) :trans true))
(define-fun .def_30 () Real (select .def_10 .def_9))
(define-fun .def_31 () Bool (= .def_30 (to_real 3)))
(define-fun .def_32 () Bool (! (not .def_31) :invar-property 0))
(assert true)
